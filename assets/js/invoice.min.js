jQuery(function(e){"use strict";e(document).ajaxComplete(function(n,o,i){if(i.url===wc_checkout_params.checkout_url||i.url.indexOf("wc-ajax=complete_order")>-1){const n=o.responseText;try{const o=e.parseJSON(n);if(!o.hasOwnProperty("is_swedbank_pay_invoice"))return!1;wc_sb_invoice.setJsUrl(o.js_url)}catch(e){return!1}}}),window.wc_sb_invoice={xhr:!1,init:function(n){this.form=n,this.form_submit=!1,this.js_url=null,e(this.form).on("click","#place_order",this.onSubmit).on("submit checkout_place_order_payex_psp_invoice")},onSubmit:function(e){return!!wc_sb_invoice.form_submit||!!wc_sb_invoice.validateForm()&&(console.log("onSubmit"),!wc_sb_invoice.form.is(".processing")&&(console.log("onSubmit1"),console.log(this.js_url),void wc_sb_invoice.waitForJsUrl()))},validateForm:function(){var n,o=!0;return(n=e("#ship-to-different-address-checkbox").is(":checked")?e(".woocommerce-billing-fields .validate-required, .woocommerce-shipping-fields .validate-required").find("input, select").not(e("#account_password, #account_username")):e(".woocommerce-billing-fields .validate-required").find("input, select").not(e("#account_password, #account_username"))).length&&n.each(function(){var n=e(this),i=n.closest(".form-row"),t=i.is(".validate-required"),u=i.is(".validate-email");(t&&("checkbox"!==n.attr("type")||n.is(":checked")?""===n.val()&&(o=!1):o=!1),u)&&(n.val()&&(new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i).test(n.val())||(o=!1)))}),o},setJsUrl:function(e){console.log(e),this.js_url=e},waitForJsUrl:function(){let e=window.setInterval(function(){wc_sb_invoice.js_url&&(window.clearInterval(e),wc_sb_invoice.initFrame(wc_sb_invoice.js_url))},1e3)},initFrame:function(n,o){void 0===o&&(o=function(){}),wc_sb_invoice.loadJs(n,function(){e.featherlight('<div id="swedbank-pay-invoice">&nbsp;</div>',{variant:"featherlight-swedbank-pay-invoice",persist:!0,closeOnClick:!1,closeOnEsc:!1,afterOpen:function(){wc_sb_invoice.initPaymentMenu("swedbank-pay-invoice")},afterClose:function(){wc_sb_invoice.form.removeClass("processing").unblock()}}),o()})},loadJs:function(e,n){let o=document.createElement("script");o.setAttribute("src",e),o.setAttribute("type","text/javascript"),o.setAttribute("async",""),o.addEventListener("load",function(){n()},!1);let i=document.getElementsByTagName("head")[0];return i&&i.appendChild(o),o},initPaymentMenu:function(e,n){console.log("initPaymentMenu"),void 0===n&&(n=function(){}),this.paymentMenu=window.payex.hostedView.invoice({container:e,culture:WC_Gateway_Swedbank_Pay_Invoice.culture,onApplicationConfigured:function(e){console.log("onApplicationConfigured"),console.log(e),n(null)},onPaymentCreated:function(){console.log("onPaymentCreated")},onPaymentCompleted:function(e){console.log("onPaymentCompleted"),console.log(e),self.location.href=e.redirectUrl},onPaymentCanceled:function(e){console.log("onPaymentCanceled"),console.log(e)},onPaymentFailed:function(e){console.log("onPaymentFailed"),console.log(e),self.location.href=e.redirectUrl},onError:function(e){console.log(e),n(e)}}),this.paymentMenu.open()}},window.wc_sb_invoice.init(e("form.checkout, form#order_review, form#add_payment_method"))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludm9pY2UuanMiXSwibmFtZXMiOlsialF1ZXJ5IiwiJCIsImRvY3VtZW50IiwiYWpheENvbXBsZXRlIiwiZXZlbnQiLCJ4aHIiLCJzZXR0aW5ncyIsInVybCIsIndjX2NoZWNrb3V0X3BhcmFtcyIsImNoZWNrb3V0X3VybCIsImluZGV4T2YiLCJkYXRhIiwicmVzcG9uc2VUZXh0IiwicmVzdWx0IiwicGFyc2VKU09OIiwiaGFzT3duUHJvcGVydHkiLCJ3Y19zYl9pbnZvaWNlIiwic2V0SnNVcmwiLCJqc191cmwiLCJlIiwid2luZG93IiwiaW5pdCIsImZvcm0iLCJ0aGlzIiwiZm9ybV9zdWJtaXQiLCJvbiIsIm9uU3VibWl0IiwidmFsaWRhdGVGb3JtIiwiY29uc29sZSIsImxvZyIsImlzIiwid2FpdEZvckpzVXJsIiwiJHJlcXVpcmVkX2lucHV0cyIsInZhbGlkYXRlZCIsImZpbmQiLCJub3QiLCJsZW5ndGgiLCJlYWNoIiwiJHRoaXMiLCIkcGFyZW50IiwiY2xvc2VzdCIsInZhbGlkYXRlX3JlcXVpcmVkIiwidmFsaWRhdGVfZW1haWwiLCJhdHRyIiwidmFsIiwiUmVnRXhwIiwidGVzdCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW5pdEZyYW1lIiwiY2FsbGJhY2siLCJsb2FkSnMiLCJmZWF0aGVybGlnaHQiLCJ2YXJpYW50IiwicGVyc2lzdCIsImNsb3NlT25DbGljayIsImNsb3NlT25Fc2MiLCJhZnRlck9wZW4iLCJpbml0UGF5bWVudE1lbnUiLCJhZnRlckNsb3NlIiwicmVtb3ZlQ2xhc3MiLCJ1bmJsb2NrIiwianMiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9IZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImlkIiwicGF5bWVudE1lbnUiLCJwYXlleCIsImhvc3RlZFZpZXciLCJpbnZvaWNlIiwiY29udGFpbmVyIiwiY3VsdHVyZSIsIldDX0dhdGV3YXlfU3dlZGJhbmtfUGF5X0ludm9pY2UiLCJvbkFwcGxpY2F0aW9uQ29uZmlndXJlZCIsIm9uUGF5bWVudENyZWF0ZWQiLCJvblBheW1lbnRDb21wbGV0ZWQiLCJzZWxmIiwibG9jYXRpb24iLCJocmVmIiwicmVkaXJlY3RVcmwiLCJvblBheW1lbnRDYW5jZWxlZCIsIm9uUGF5bWVudEZhaWxlZCIsIm9uRXJyb3IiLCJvcGVuIl0sIm1hcHBpbmdzIjoiQUFDQUEsT0FBUSxTQUFVQyxHQUNkLGFBRUFBLEVBQUdDLFVBQVdDLGFBQWMsU0FBV0MsRUFBT0MsRUFBS0MsR0FDL0MsR0FBT0EsRUFBU0MsTUFBUUMsbUJBQW1CQyxjQUFvQkgsRUFBU0MsSUFBSUcsUUFBUywyQkFBOEIsRUFBTSxDQUNySCxNQUFNQyxFQUFPTixFQUFJTyxhQUdqQixJQUNJLE1BQU1DLEVBQVNaLEVBQUVhLFVBQVdILEdBRzVCLElBQU9FLEVBQU9FLGVBQWdCLDJCQUMxQixPQUFPLEVBSVhDLGNBQWNDLFNBQVVKLEVBQU9LLFFBQ2pDLE1BQVFDLEdBQ04sT0FBTyxNQVFuQkMsT0FBT0osY0FBZ0IsQ0FDbkJYLEtBQUssRUFLTGdCLEtBQU0sU0FBVUMsR0FDWkMsS0FBS0QsS0FBZUEsRUFDcEJDLEtBQUtDLGFBQWUsRUFDcEJELEtBQUtMLE9BQWUsS0FFcEJqQixFQUFHc0IsS0FBS0QsTUFHSEcsR0FBSSxRQUFTLGVBQWdCRixLQUFLRyxVQUdsQ0QsR0FBSSxrREFHYkMsU0FBVSxTQUFVUCxHQUNoQixRQUFLSCxjQUFjUSxlQUlaUixjQUFjVyxpQkFJckJDLFFBQVFDLElBQUssYUFFUmIsY0FBY00sS0FBS1EsR0FBSSxpQkFJNUJGLFFBQVFDLElBQUssYUFDYkQsUUFBUUMsSUFBSU4sS0FBS0wsYUFFakJGLGNBQWNlLGtCQU9sQkosYUFBYyxXQUNWLElBQUlLLEVBQ0FDLEdBQVksRUFvQ2hCLE9BaENJRCxFQURDL0IsRUFBRyx1Q0FBd0M2QixHQUFJLFlBQzdCN0IsRUFBRyxtR0FBb0dpQyxLQUFLLGlCQUFpQkMsSUFBS2xDLEVBQUcseUNBRXJJQSxFQUFHLGtEQUFtRGlDLEtBQUssaUJBQWlCQyxJQUFLbEMsRUFBRywwQ0FHckZtQyxRQUNsQkosRUFBaUJLLEtBQU0sV0FDbkIsSUFBSUMsRUFBUXJDLEVBQUdzQixNQUNYZ0IsRUFBb0JELEVBQU1FLFFBQVMsYUFDbkNDLEVBQW9CRixFQUFRVCxHQUFJLHNCQUNoQ1ksRUFBb0JILEVBQVFULEdBQUksb0JBRS9CVyxJQUNJLGFBQWVILEVBQU1LLEtBQU0sU0FBY0wsRUFBTVIsR0FBSSxZQUU1QixLQUFoQlEsRUFBTU0sUUFDZFgsR0FBWSxHQUZaQSxHQUFZLEdBTWZTLEtBQ0lKLEVBQU1NLFFBRU8sSUFBSUMsT0FBTyw4NEJBQ1ZDLEtBQU1SLEVBQU1NLFNBQ3ZCWCxHQUFZLE9BT3pCQSxHQVFYaEIsU0FBVSxTQUFXVixHQUNqQnFCLFFBQVFDLElBQUt0QixHQUNiZ0IsS0FBS0wsT0FBU1gsR0FNbEJ3QixhQUFjLFdBQ1YsSUFBSWdCLEVBQVczQixPQUFPNEIsWUFBYSxXQUMxQmhDLGNBQWNFLFNBQ2ZFLE9BQU82QixjQUFlRixHQUV0Qi9CLGNBQWNrQyxVQUFXbEMsY0FBY0UsVUFFNUMsTUFTUGdDLFVBQVcsU0FBVzNDLEVBQUs0QyxRQUNFLElBQWJBLElBQ1JBLEVBQVcsY0FJZm5DLGNBQWNvQyxPQUFRN0MsRUFBSyxXQUN2Qk4sRUFBRW9ELGFBQWMsOENBQStDLENBQzNEQyxRQUFTLG9DQUNUQyxTQUFTLEVBQ1RDLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxVQUFXLFdBQ1AxQyxjQUFjMkMsZ0JBQWlCLHlCQUVuQ0MsV0FBWSxXQUNSNUMsY0FBY00sS0FBS3VDLFlBQWEsY0FBZUMsYUFJdkRYLE9BU1JDLE9BQVEsU0FBV1csRUFBSVosR0FFbkIsSUFBSWEsRUFBUzlELFNBQVMrRCxjQUFlLFVBR3JDRCxFQUFPRSxhQUFjLE1BQU9ILEdBQzVCQyxFQUFPRSxhQUFjLE9BQVEsbUJBQzdCRixFQUFPRSxhQUFjLFFBQVMsSUFDOUJGLEVBQU9HLGlCQUFrQixPQUFRLFdBQzdCaEIsTUFDRCxHQUdILElBQUlpQixFQUFRbEUsU0FBU21FLHFCQUFzQixRQUFTLEdBTXBELE9BTEtELEdBRURBLEVBQU1FLFlBQWFOLEdBR2hCQSxHQVVYTCxnQkFBaUIsU0FBV1ksRUFBSXBCLEdBQzVCdkIsUUFBUUMsSUFBSyx3QkFFWSxJQUFic0IsSUFDUkEsRUFBVyxjQUlmNUIsS0FBS2lELFlBQWNwRCxPQUFPcUQsTUFBTUMsV0FBV0MsUUFBUyxDQUNoREMsVUFBV0wsRUFDWE0sUUFBU0MsZ0NBQWdDRCxRQUN6Q0Usd0JBQXlCLFNBQVVwRSxHQUMvQmlCLFFBQVFDLElBQUssMkJBQ2JELFFBQVFDLElBQUtsQixHQUNid0MsRUFBVSxPQUVkNkIsaUJBQWtCLFdBQ2RwRCxRQUFRQyxJQUFLLHFCQUVqQm9ELG1CQUFvQixTQUFXdEUsR0FDM0JpQixRQUFRQyxJQUFLLHNCQUNiRCxRQUFRQyxJQUFLbEIsR0FFYnVFLEtBQUtDLFNBQVNDLEtBQU96RSxFQUFLMEUsYUFFOUJDLGtCQUFtQixTQUFXM0UsR0FDMUJpQixRQUFRQyxJQUFLLHFCQUNiRCxRQUFRQyxJQUFLbEIsSUFFakI0RSxnQkFBaUIsU0FBVzVFLEdBQ3hCaUIsUUFBUUMsSUFBSyxtQkFDYkQsUUFBUUMsSUFBS2xCLEdBRWJ1RSxLQUFLQyxTQUFTQyxLQUFPekUsRUFBSzBFLGFBRTlCRyxRQUFTLFNBQVc3RSxHQUNoQmlCLFFBQVFDLElBQUtsQixHQUNid0MsRUFBVXhDLE1BSWxCWSxLQUFLaUQsWUFBWWlCLFNBSXpCckUsT0FBT0osY0FBY0ssS0FBTXBCLEVBQUciLCJmaWxlIjoiaW52b2ljZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgd2NfY2hlY2tvdXRfcGFyYW1zICovXG5qUXVlcnkoIGZ1bmN0aW9uKCAkICkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgICQoIGRvY3VtZW50ICkuYWpheENvbXBsZXRlKCBmdW5jdGlvbiAoIGV2ZW50LCB4aHIsIHNldHRpbmdzICkge1xuICAgICAgICBpZiAoICggc2V0dGluZ3MudXJsID09PSB3Y19jaGVja291dF9wYXJhbXMuY2hlY2tvdXRfdXJsICkgfHwgKCBzZXR0aW5ncy51cmwuaW5kZXhPZiggJ3djLWFqYXg9Y29tcGxldGVfb3JkZXInICkgPiAtMSApICkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAgIC8vIFBhcnNlXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9ICQucGFyc2VKU09OKCBkYXRhICk7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpcyByZXNwb25zZSBmcm9tIHBheW1lbnQgZ2F0ZXdheVxuICAgICAgICAgICAgICAgIGlmICggISByZXN1bHQuaGFzT3duUHJvcGVydHkoICdpc19zd2VkYmFua19wYXlfaW52b2ljZScgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNhdmUganNfdXJsIHZhbHVlXG4gICAgICAgICAgICAgICAgd2Nfc2JfaW52b2ljZS5zZXRKc1VybCggcmVzdWx0LmpzX3VybCApO1xuICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSApO1xuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IHRvIGhhbmRsZSBJbnZvaWNlIHBheW1lbnQgZm9ybXMuXG4gICAgICovXG4gICAgd2luZG93LndjX3NiX2ludm9pY2UgPSB7XG4gICAgICAgIHhocjogZmFsc2UsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluaXRpYWxpemUgZSBoYW5kbGVycyBhbmQgVUkgc3RhdGUuXG4gICAgICAgICAqL1xuICAgICAgICBpbml0OiBmdW5jdGlvbiggZm9ybSApIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybSAgICAgICAgID0gZm9ybTtcbiAgICAgICAgICAgIHRoaXMuZm9ybV9zdWJtaXQgID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmpzX3VybCAgICAgICA9IG51bGw7XG5cbiAgICAgICAgICAgICQoIHRoaXMuZm9ybSApXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBiaW5kIGRpcmVjdGx5IHRvIHRoZSBjbGljayAoYW5kIG5vdCBjaGVja291dF9wbGFjZV9vcmRlcl9wYXlleF9jaGVja291dCkgdG8gYXZvaWQgcG9wdXAgYmxvY2tlcnNcbiAgICAgICAgICAgICAgICAvLyBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzIChsaWtlIG9uIENocm9tZSBmb3IgaU9TKSBmcm9tIGJsb2NraW5nIHBheWV4X2NoZWNrb3V0KHBheW1lbnRfaWQsIHt9LCAnb3BlbicpOyBmcm9tIG9wZW5pbmcgYSB0YWJcbiAgICAgICAgICAgICAgICAub24oICdjbGljaycsICcjcGxhY2Vfb3JkZXInLCB0aGlzLm9uU3VibWl0IClcblxuICAgICAgICAgICAgICAgIC8vIFdvb0NvbW1lcmNlIGxldHMgdXMgcmV0dXJuIGEgZmFsc2Ugb24gY2hlY2tvdXRfcGxhY2Vfb3JkZXJfe2dhdGV3YXl9IHRvIGtlZXAgdGhlIGZvcm0gZnJvbSBzdWJtaXR0aW5nXG4gICAgICAgICAgICAgICAgLm9uKCAnc3VibWl0IGNoZWNrb3V0X3BsYWNlX29yZGVyX3BheWV4X3BzcF9pbnZvaWNlJyApO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uU3VibWl0OiBmdW5jdGlvbiggZSApIHtcbiAgICAgICAgICAgIGlmICggd2Nfc2JfaW52b2ljZS5mb3JtX3N1Ym1pdCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCAhIHdjX3NiX2ludm9pY2UudmFsaWRhdGVGb3JtKCkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ29uU3VibWl0JyApO1xuXG4gICAgICAgICAgICBpZiAoIHdjX3NiX2ludm9pY2UuZm9ybS5pcyggJy5wcm9jZXNzaW5nJyApICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5sb2coICdvblN1Ym1pdDEnICk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmpzX3VybCk7XG5cbiAgICAgICAgICAgIHdjX3NiX2ludm9pY2Uud2FpdEZvckpzVXJsKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRlIGNoZWNrb3V0IGZpZWxkcyBvbiB0aGUgY2hlY2tvdXQgZm9ybVxuICAgICAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdmFsaWRhdGVGb3JtOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgJHJlcXVpcmVkX2lucHV0cyxcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgd2UgbmVlZCB0byB2YWxpZGF0ZSBzaGlwcGluZyBhZGRyZXNzXG4gICAgICAgICAgICBpZiAoICQoICcjc2hpcC10by1kaWZmZXJlbnQtYWRkcmVzcy1jaGVja2JveCcgKS5pcyggJzpjaGVja2VkJyApICkge1xuICAgICAgICAgICAgICAgICRyZXF1aXJlZF9pbnB1dHMgPSAkKCAnLndvb2NvbW1lcmNlLWJpbGxpbmctZmllbGRzIC52YWxpZGF0ZS1yZXF1aXJlZCwgLndvb2NvbW1lcmNlLXNoaXBwaW5nLWZpZWxkcyAudmFsaWRhdGUtcmVxdWlyZWQnICkuZmluZCgnaW5wdXQsIHNlbGVjdCcpLm5vdCggJCggJyNhY2NvdW50X3Bhc3N3b3JkLCAjYWNjb3VudF91c2VybmFtZScgKSApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkcmVxdWlyZWRfaW5wdXRzID0gJCggJy53b29jb21tZXJjZS1iaWxsaW5nLWZpZWxkcyAudmFsaWRhdGUtcmVxdWlyZWQnICkuZmluZCgnaW5wdXQsIHNlbGVjdCcpLm5vdCggJCggJyNhY2NvdW50X3Bhc3N3b3JkLCAjYWNjb3VudF91c2VybmFtZScgKSApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICRyZXF1aXJlZF9pbnB1dHMubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgICRyZXF1aXJlZF9pbnB1dHMuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQoIHRoaXMgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRwYXJlbnQgICAgICAgICAgID0gJHRoaXMuY2xvc2VzdCggJy5mb3JtLXJvdycgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlX3JlcXVpcmVkID0gJHBhcmVudC5pcyggJy52YWxpZGF0ZS1yZXF1aXJlZCcgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlX2VtYWlsICAgID0gJHBhcmVudC5pcyggJy52YWxpZGF0ZS1lbWFpbCcgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbGlkYXRlX3JlcXVpcmVkICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAnY2hlY2tib3gnID09PSAkdGhpcy5hdHRyKCAndHlwZScgKSAmJiAhICR0aGlzLmlzKCAnOmNoZWNrZWQnICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAkdGhpcy52YWwoKSA9PT0gJycgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbGlkYXRlX2VtYWlsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkdGhpcy52YWwoKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yODU1ODY1L2pxdWVyeS12YWxpZGF0ZS1lLW1haWwtYWRkcmVzcy1yZWdleCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/JC9pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgcGF0dGVybi50ZXN0KCAkdGhpcy52YWwoKSAgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBKcyB1cmwuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB1cmxcbiAgICAgICAgICovXG4gICAgICAgIHNldEpzVXJsOiBmdW5jdGlvbiAoIHVybCApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCB1cmwgKTtcbiAgICAgICAgICAgIHRoaXMuanNfdXJsID0gdXJsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXYWl0IGZvciBKUyB1cmwgYXZhaWxhYmlsaXR5XG4gICAgICAgICAqL1xuICAgICAgICB3YWl0Rm9ySnNVcmw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICggd2Nfc2JfaW52b2ljZS5qc191cmwgKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKCBpbnRlcnZhbCApO1xuXG4gICAgICAgICAgICAgICAgICAgIHdjX3NiX2ludm9pY2UuaW5pdEZyYW1lKCB3Y19zYl9pbnZvaWNlLmpzX3VybCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDEwMDAgKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdCBmcmFtZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHVybFxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIGluaXRGcmFtZTogZnVuY3Rpb24gKCB1cmwsIGNhbGxiYWNrICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YgY2FsbGJhY2sgPT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvYWQgSlNcbiAgICAgICAgICAgIHdjX3NiX2ludm9pY2UubG9hZEpzKCB1cmwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkLmZlYXRoZXJsaWdodCggJzxkaXYgaWQ9XCJzd2VkYmFuay1wYXktaW52b2ljZVwiPiZuYnNwOzwvZGl2PicsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogJ2ZlYXRoZXJsaWdodC1zd2VkYmFuay1wYXktaW52b2ljZScsXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlT25Fc2M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhZnRlck9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdjX3NiX2ludm9pY2UuaW5pdFBheW1lbnRNZW51KCAnc3dlZGJhbmstcGF5LWludm9pY2UnICk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyQ2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdjX3NiX2ludm9pY2UuZm9ybS5yZW1vdmVDbGFzcyggJ3Byb2Nlc3NpbmcnICkudW5ibG9jaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgfSApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkIEpTXG4gICAgICAgICAqIEBwYXJhbSBqc1xuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIGxvYWRKczogZnVuY3Rpb24gKCBqcywgY2FsbGJhY2sgKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGVzIGEgbmV3IHNjcmlwdCB0YWdcbiAgICAgICAgICAgIGxldCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnc2NyaXB0JyApO1xuXG4gICAgICAgICAgICAvLyBTZXQgc2NyaXB0IHRhZyBwYXJhbXNcbiAgICAgICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoICdzcmMnLCBqcyApO1xuICAgICAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAndGV4dC9qYXZhc2NyaXB0JyApO1xuICAgICAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSggJ2FzeW5jJywgJycgKTtcbiAgICAgICAgICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSwgZmFsc2UgKTtcblxuICAgICAgICAgICAgLy8gR2V0cyBkb2N1bWVudCBoZWFkIGVsZW1lbnRcbiAgICAgICAgICAgIGxldCBvSGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnaGVhZCcgKVswXTtcbiAgICAgICAgICAgIGlmICggb0hlYWQgKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHNjcmlwdCB0YWcgdG8gaGVhZFxuICAgICAgICAgICAgICAgIG9IZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNjcmlwdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhdGUgUGF5bWVudCBNZW51LlxuICAgICAgICAgKiBQYXltZW50IEphdmFzY3JpcHQgbXVzdCBiZSBsb2FkZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBpZFxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIGluaXRQYXltZW50TWVudTogZnVuY3Rpb24gKCBpZCwgY2FsbGJhY2sgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ2luaXRQYXltZW50TWVudScgKTtcblxuICAgICAgICAgICAgaWYgKCB0eXBlb2YgY2FsbGJhY2sgPT09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvYWQgSW52b2ljZSBmcmFtZVxuICAgICAgICAgICAgdGhpcy5wYXltZW50TWVudSA9IHdpbmRvdy5wYXlleC5ob3N0ZWRWaWV3Lmludm9pY2UoIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGlkLFxuICAgICAgICAgICAgICAgIGN1bHR1cmU6IFdDX0dhdGV3YXlfU3dlZGJhbmtfUGF5X0ludm9pY2UuY3VsdHVyZSxcbiAgICAgICAgICAgICAgICBvbkFwcGxpY2F0aW9uQ29uZmlndXJlZDogZnVuY3Rpb24oIGRhdGEgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnb25BcHBsaWNhdGlvbkNvbmZpZ3VyZWQnICk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBkYXRhICk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCBudWxsICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvblBheW1lbnRDcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnb25QYXltZW50Q3JlYXRlZCcgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uUGF5bWVudENvbXBsZXRlZDogZnVuY3Rpb24gKCBkYXRhICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ29uUGF5bWVudENvbXBsZXRlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGRhdGEgKTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2F0aW9uLmhyZWYgPSBkYXRhLnJlZGlyZWN0VXJsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25QYXltZW50Q2FuY2VsZWQ6IGZ1bmN0aW9uICggZGF0YSApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdvblBheW1lbnRDYW5jZWxlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGRhdGEgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uUGF5bWVudEZhaWxlZDogZnVuY3Rpb24gKCBkYXRhICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ29uUGF5bWVudEZhaWxlZCcgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGRhdGEgKTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2F0aW9uLmhyZWYgPSBkYXRhLnJlZGlyZWN0VXJsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gKCBkYXRhICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggZGF0YSApO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayggZGF0YSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgdGhpcy5wYXltZW50TWVudS5vcGVuKCk7XG4gICAgICAgIH0sXG4gICAgfVxuXG4gICAgd2luZG93LndjX3NiX2ludm9pY2UuaW5pdCggJCggXCJmb3JtLmNoZWNrb3V0LCBmb3JtI29yZGVyX3JldmlldywgZm9ybSNhZGRfcGF5bWVudF9tZXRob2RcIiApICk7XG59ICk7XG4iXX0=
