{"version":3,"sources":["intlTelInput.js"],"names":["factory","module","exports","window","intlTelInput","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","intlTelInputGlobals","getInstance","input","id","getAttribute","instances","defaults","allowDropdown","autoHideDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","utilsScript","regionlessNanpNumbers","addEventListener","windowLoaded","forEachProp","obj","callback","keys","forEachInstance","method","Iti","options","_this","this","instance","Constructor","TypeError","_classCallCheck","telInput","activeItem","highlightedItem","customOptions","value","hasOwnProperty","hadInitialPlaceholder","Boolean","protoProps","staticProps","_this2","isMobile","test","navigator","userAgent","document","body","classList","add","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","countryCode","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","localeCompare","dialCodes","_addCountryCode","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","attrs","container","el","createElement","setAttribute","appendChild","hasAttribute","form","parentClass","wrapper","_createEl","class","parentNode","insertBefore","flagsContainer","selectedFlag","role","concat","selectedFlagInner","selectedDialCode","dropdownArrow","countryList","_appendListItems","dropdown","hiddenInputName","lastIndexOf","type","className","preferred","tmp","idSuffix","insertAdjacentHTML","val","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_getClosestLabel","_handleClickSelectedFlag","disabled","readOnly","_showDropdown","_handleFlagsContainerKeydown","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","charAt","numeric","_getNumeric","s","replace","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_trigger","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","_toggleClass","extraTop","style","left","scrollLeft","_handleWindowScroll","_this9","_handleMouseoverCountryList","listItem","_getClosestListItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","querySelector","originalNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","isNanp","alreadySelected","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","prevCountry","title","innerHTML","selectedFlagWidth","offsetWidth","_getHiddenSelectedFlagWidth","paddingLeft","_updatePlaceholder","nextItem","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","width","removeChild","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","hasSelectedListItem","newNumber","inputVal","newDialCode","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","trim","numericVal","start","_cap","setCountry","removeAttribute","getExtension","_getFullNumber","getNumberType","getValidationError","isValidNumber","originalCountryCode","prototype","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti","_init"],"mappings":"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","file":"intlTelInput.min.js","sourcesContent":["/*\n * International Telephone Input v17.0.3\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Swaziland\", \"sz\", \"268\" ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {}\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        if (typeof window === \"object\") {\n            // keep track of if the window.load event has fired as impossible to check after the fact\n            window.addEventListener(\"load\", function() {\n                // UPDATE: use a public static field so we can fudge it in the tests\n                window.intlTelInputGlobals.windowLoaded = true;\n            });\n        }\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    var val = this.telInput.value;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.windowLoaded) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.3\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});"]}