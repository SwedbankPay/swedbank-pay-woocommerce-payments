!function(t){"object"==typeof module&&module.exports?module.exports=t():window.intlTelInput=t()}(function(t){"use strict";return function(){for(var e=[["Afghanistan (‫افغانستان‬‎)","af","93"],["Albania (Shqipëri)","al","355"],["Algeria (‫الجزائر‬‎)","dz","213"],["American Samoa","as","1",5,["684"]],["Andorra","ad","376"],["Angola","ao","244"],["Anguilla","ai","1",6,["264"]],["Antigua and Barbuda","ag","1",7,["268"]],["Argentina","ar","54"],["Armenia (Հայաստան)","am","374"],["Aruba","aw","297"],["Australia","au","61",0],["Austria (Österreich)","at","43"],["Azerbaijan (Azərbaycan)","az","994"],["Bahamas","bs","1",8,["242"]],["Bahrain (‫البحرين‬‎)","bh","973"],["Bangladesh (বাংলাদেশ)","bd","880"],["Barbados","bb","1",9,["246"]],["Belarus (Беларусь)","by","375"],["Belgium (België)","be","32"],["Belize","bz","501"],["Benin (Bénin)","bj","229"],["Bermuda","bm","1",10,["441"]],["Bhutan (འབྲུག)","bt","975"],["Bolivia","bo","591"],["Bosnia and Herzegovina (Босна и Херцеговина)","ba","387"],["Botswana","bw","267"],["Brazil (Brasil)","br","55"],["British Indian Ocean Territory","io","246"],["British Virgin Islands","vg","1",11,["284"]],["Brunei","bn","673"],["Bulgaria (България)","bg","359"],["Burkina Faso","bf","226"],["Burundi (Uburundi)","bi","257"],["Cambodia (កម្ពុជា)","kh","855"],["Cameroon (Cameroun)","cm","237"],["Canada","ca","1",1,["204","226","236","249","250","289","306","343","365","387","403","416","418","431","437","438","450","506","514","519","548","579","581","587","604","613","639","647","672","705","709","742","778","780","782","807","819","825","867","873","902","905"]],["Cape Verde (Kabu Verdi)","cv","238"],["Caribbean Netherlands","bq","599",1,["3","4","7"]],["Cayman Islands","ky","1",12,["345"]],["Central African Republic (République centrafricaine)","cf","236"],["Chad (Tchad)","td","235"],["Chile","cl","56"],["China (中国)","cn","86"],["Christmas Island","cx","61",2,["89164"]],["Cocos (Keeling) Islands","cc","61",1,["89162"]],["Colombia","co","57"],["Comoros (‫جزر القمر‬‎)","km","269"],["Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)","cd","243"],["Congo (Republic) (Congo-Brazzaville)","cg","242"],["Cook Islands","ck","682"],["Costa Rica","cr","506"],["Côte d’Ivoire","ci","225"],["Croatia (Hrvatska)","hr","385"],["Cuba","cu","53"],["Curaçao","cw","599",0],["Cyprus (Κύπρος)","cy","357"],["Czech Republic (Česká republika)","cz","420"],["Denmark (Danmark)","dk","45"],["Djibouti","dj","253"],["Dominica","dm","1",13,["767"]],["Dominican Republic (República Dominicana)","do","1",2,["809","829","849"]],["Ecuador","ec","593"],["Egypt (‫مصر‬‎)","eg","20"],["El Salvador","sv","503"],["Equatorial Guinea (Guinea Ecuatorial)","gq","240"],["Eritrea","er","291"],["Estonia (Eesti)","ee","372"],["Ethiopia","et","251"],["Falkland Islands (Islas Malvinas)","fk","500"],["Faroe Islands (Føroyar)","fo","298"],["Fiji","fj","679"],["Finland (Suomi)","fi","358",0],["France","fr","33"],["French Guiana (Guyane française)","gf","594"],["French Polynesia (Polynésie française)","pf","689"],["Gabon","ga","241"],["Gambia","gm","220"],["Georgia (საქართველო)","ge","995"],["Germany (Deutschland)","de","49"],["Ghana (Gaana)","gh","233"],["Gibraltar","gi","350"],["Greece (Ελλάδα)","gr","30"],["Greenland (Kalaallit Nunaat)","gl","299"],["Grenada","gd","1",14,["473"]],["Guadeloupe","gp","590",0],["Guam","gu","1",15,["671"]],["Guatemala","gt","502"],["Guernsey","gg","44",1,["1481","7781","7839","7911"]],["Guinea (Guinée)","gn","224"],["Guinea-Bissau (Guiné Bissau)","gw","245"],["Guyana","gy","592"],["Haiti","ht","509"],["Honduras","hn","504"],["Hong Kong (香港)","hk","852"],["Hungary (Magyarország)","hu","36"],["Iceland (Ísland)","is","354"],["India (भारत)","in","91"],["Indonesia","id","62"],["Iran (‫ایران‬‎)","ir","98"],["Iraq (‫العراق‬‎)","iq","964"],["Ireland","ie","353"],["Isle of Man","im","44",2,["1624","74576","7524","7924","7624"]],["Israel (‫ישראל‬‎)","il","972"],["Italy (Italia)","it","39",0],["Jamaica","jm","1",4,["876","658"]],["Japan (日本)","jp","81"],["Jersey","je","44",3,["1534","7509","7700","7797","7829","7937"]],["Jordan (‫الأردن‬‎)","jo","962"],["Kazakhstan (Казахстан)","kz","7",1,["33","7"]],["Kenya","ke","254"],["Kiribati","ki","686"],["Kosovo","xk","383"],["Kuwait (‫الكويت‬‎)","kw","965"],["Kyrgyzstan (Кыргызстан)","kg","996"],["Laos (ລາວ)","la","856"],["Latvia (Latvija)","lv","371"],["Lebanon (‫لبنان‬‎)","lb","961"],["Lesotho","ls","266"],["Liberia","lr","231"],["Libya (‫ليبيا‬‎)","ly","218"],["Liechtenstein","li","423"],["Lithuania (Lietuva)","lt","370"],["Luxembourg","lu","352"],["Macau (澳門)","mo","853"],["Macedonia (FYROM) (Македонија)","mk","389"],["Madagascar (Madagasikara)","mg","261"],["Malawi","mw","265"],["Malaysia","my","60"],["Maldives","mv","960"],["Mali","ml","223"],["Malta","mt","356"],["Marshall Islands","mh","692"],["Martinique","mq","596"],["Mauritania (‫موريتانيا‬‎)","mr","222"],["Mauritius (Moris)","mu","230"],["Mayotte","yt","262",1,["269","639"]],["Mexico (México)","mx","52"],["Micronesia","fm","691"],["Moldova (Republica Moldova)","md","373"],["Monaco","mc","377"],["Mongolia (Монгол)","mn","976"],["Montenegro (Crna Gora)","me","382"],["Montserrat","ms","1",16,["664"]],["Morocco (‫المغرب‬‎)","ma","212",0],["Mozambique (Moçambique)","mz","258"],["Myanmar (Burma) (မြန်မာ)","mm","95"],["Namibia (Namibië)","na","264"],["Nauru","nr","674"],["Nepal (नेपाल)","np","977"],["Netherlands (Nederland)","nl","31"],["New Caledonia (Nouvelle-Calédonie)","nc","687"],["New Zealand","nz","64"],["Nicaragua","ni","505"],["Niger (Nijar)","ne","227"],["Nigeria","ng","234"],["Niue","nu","683"],["Norfolk Island","nf","672"],["North Korea (조선 민주주의 인민 공화국)","kp","850"],["Northern Mariana Islands","mp","1",17,["670"]],["Norway (Norge)","no","47",0],["Oman (‫عُمان‬‎)","om","968"],["Pakistan (‫پاکستان‬‎)","pk","92"],["Palau","pw","680"],["Palestine (‫فلسطين‬‎)","ps","970"],["Panama (Panamá)","pa","507"],["Papua New Guinea","pg","675"],["Paraguay","py","595"],["Peru (Perú)","pe","51"],["Philippines","ph","63"],["Poland (Polska)","pl","48"],["Portugal","pt","351"],["Puerto Rico","pr","1",3,["787","939"]],["Qatar (‫قطر‬‎)","qa","974"],["Réunion (La Réunion)","re","262",0],["Romania (România)","ro","40"],["Russia (Россия)","ru","7",0],["Rwanda","rw","250"],["Saint Barthélemy","bl","590",1],["Saint Helena","sh","290"],["Saint Kitts and Nevis","kn","1",18,["869"]],["Saint Lucia","lc","1",19,["758"]],["Saint Martin (Saint-Martin (partie française))","mf","590",2],["Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)","pm","508"],["Saint Vincent and the Grenadines","vc","1",20,["784"]],["Samoa","ws","685"],["San Marino","sm","378"],["São Tomé and Príncipe (São Tomé e Príncipe)","st","239"],["Saudi Arabia (‫المملكة العربية السعودية‬‎)","sa","966"],["Senegal (Sénégal)","sn","221"],["Serbia (Србија)","rs","381"],["Seychelles","sc","248"],["Sierra Leone","sl","232"],["Singapore","sg","65"],["Sint Maarten","sx","1",21,["721"]],["Slovakia (Slovensko)","sk","421"],["Slovenia (Slovenija)","si","386"],["Solomon Islands","sb","677"],["Somalia (Soomaaliya)","so","252"],["South Africa","za","27"],["South Korea (대한민국)","kr","82"],["South Sudan (‫جنوب السودان‬‎)","ss","211"],["Spain (España)","es","34"],["Sri Lanka (ශ්‍රී ලංකාව)","lk","94"],["Sudan (‫السودان‬‎)","sd","249"],["Suriname","sr","597"],["Svalbard and Jan Mayen","sj","47",1,["79"]],["Swaziland","sz","268"],["Sweden (Sverige)","se","46"],["Switzerland (Schweiz)","ch","41"],["Syria (‫سوريا‬‎)","sy","963"],["Taiwan (台灣)","tw","886"],["Tajikistan","tj","992"],["Tanzania","tz","255"],["Thailand (ไทย)","th","66"],["Timor-Leste","tl","670"],["Togo","tg","228"],["Tokelau","tk","690"],["Tonga","to","676"],["Trinidad and Tobago","tt","1",22,["868"]],["Tunisia (‫تونس‬‎)","tn","216"],["Turkey (Türkiye)","tr","90"],["Turkmenistan","tm","993"],["Turks and Caicos Islands","tc","1",23,["649"]],["Tuvalu","tv","688"],["U.S. Virgin Islands","vi","1",24,["340"]],["Uganda","ug","256"],["Ukraine (Україна)","ua","380"],["United Arab Emirates (‫الإمارات العربية المتحدة‬‎)","ae","971"],["United Kingdom","gb","44",0],["United States","us","1",0],["Uruguay","uy","598"],["Uzbekistan (Oʻzbekiston)","uz","998"],["Vanuatu","vu","678"],["Vatican City (Città del Vaticano)","va","39",1,["06698"]],["Venezuela","ve","58"],["Vietnam (Việt Nam)","vn","84"],["Wallis and Futuna (Wallis-et-Futuna)","wf","681"],["Western Sahara (‫الصحراء الغربية‬‎)","eh","212",1,["5288","5289"]],["Yemen (‫اليمن‬‎)","ye","967"],["Zambia","zm","260"],["Zimbabwe","zw","263"],["Åland Islands","ax","358",1,["18"]]],i=0;i<e.length;i++){var n=e[i];e[i]={name:n[0],iso2:n[1],dialCode:n[2],priority:n[3]||0,areaCodes:n[4]||null}}function a(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o={getInstance:function(t){var e=t.getAttribute("data-intl-tel-input-id");return window.intlTelInputGlobals.instances[e]},instances:{}};"object"==typeof window&&(window.intlTelInputGlobals=o);var s=0,r={allowDropdown:!0,autoHideDialCode:!0,autoPlaceholder:"polite",customContainer:"",customPlaceholder:null,dropdownContainer:null,excludeCountries:[],formatOnDisplay:!0,geoIpLookup:null,hiddenInput:"",initialCountry:"",localizedCountries:null,nationalMode:!0,onlyCountries:[],placeholderNumberType:"MOBILE",preferredCountries:["us","gb"],separateDialCode:!1,utilsScript:""},l=["800","822","833","844","855","866","877","880","881","882","883","884","885","886","887","888","889"];"object"==typeof window&&window.addEventListener("load",function(){window.intlTelInputGlobals.windowLoaded=!0});var u=function(t,e){for(var i=Object.keys(t),n=0;n<i.length;n++)e(i[n],t[i[n]])},d=function(t){u(window.intlTelInputGlobals.instances,function(e){window.intlTelInputGlobals.instances[e][t]()})},h=function(){function i(t,e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),this.id=s++,this.telInput=t,this.activeItem=null,this.highlightedItem=null;var a=e||{};this.options={},u(r,function(t,e){n.options[t]=a.hasOwnProperty(t)?a[t]:e}),this.hadInitialPlaceholder=Boolean(t.getAttribute("placeholder"))}var n,o,h;return n=i,(o=[{key:"_init",value:function(){var t=this;if(this.options.nationalMode&&(this.options.autoHideDialCode=!1),this.options.separateDialCode&&(this.options.autoHideDialCode=this.options.nationalMode=!1),this.isMobile=/Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),this.isMobile&&(document.body.classList.add("iti-mobile"),this.options.dropdownContainer||(this.options.dropdownContainer=document.body)),"undefined"!=typeof Promise){var e=new Promise(function(e,i){t.resolveAutoCountryPromise=e,t.rejectAutoCountryPromise=i}),i=new Promise(function(e,i){t.resolveUtilsScriptPromise=e,t.rejectUtilsScriptPromise=i});this.promise=Promise.all([e,i])}else this.resolveAutoCountryPromise=this.rejectAutoCountryPromise=function(){},this.resolveUtilsScriptPromise=this.rejectUtilsScriptPromise=function(){};this.selectedCountryData={},this._processCountryData(),this._generateMarkup(),this._setInitialState(),this._initListeners(),this._initRequests()}},{key:"_processCountryData",value:function(){this._processAllCountries(),this._processCountryCodes(),this._processPreferredCountries(),this.options.localizedCountries&&this._translateCountriesByLocale(),(this.options.onlyCountries.length||this.options.localizedCountries)&&this.countries.sort(this._countryNameSort)}},{key:"_addCountryCode",value:function(e,i,n){i.length>this.countryCodeMaxLen&&(this.countryCodeMaxLen=i.length),this.countryCodes.hasOwnProperty(i)||(this.countryCodes[i]=[]);for(var a=0;a<this.countryCodes[i].length;a++)if(this.countryCodes[i][a]===e)return;var o=n!==t?n:this.countryCodes[i].length;this.countryCodes[i][o]=e}},{key:"_processAllCountries",value:function(){if(this.options.onlyCountries.length){var t=this.options.onlyCountries.map(function(t){return t.toLowerCase()});this.countries=e.filter(function(e){return t.indexOf(e.iso2)>-1})}else if(this.options.excludeCountries.length){var i=this.options.excludeCountries.map(function(t){return t.toLowerCase()});this.countries=e.filter(function(t){return-1===i.indexOf(t.iso2)})}else this.countries=e}},{key:"_translateCountriesByLocale",value:function(){for(var t=0;t<this.countries.length;t++){var e=this.countries[t].iso2.toLowerCase();this.options.localizedCountries.hasOwnProperty(e)&&(this.countries[t].name=this.options.localizedCountries[e])}}},{key:"_countryNameSort",value:function(t,e){return t.name.localeCompare(e.name)}},{key:"_processCountryCodes",value:function(){this.countryCodeMaxLen=0,this.dialCodes={},this.countryCodes={};for(var t=0;t<this.countries.length;t++){var e=this.countries[t];this.dialCodes[e.dialCode]||(this.dialCodes[e.dialCode]=!0),this._addCountryCode(e.iso2,e.dialCode,e.priority)}for(var i=0;i<this.countries.length;i++){var n=this.countries[i];if(n.areaCodes)for(var a=this.countryCodes[n.dialCode][0],o=0;o<n.areaCodes.length;o++){for(var s=n.areaCodes[o],r=1;r<s.length;r++){var l=n.dialCode+s.substr(0,r);this._addCountryCode(a,l),this._addCountryCode(n.iso2,l)}this._addCountryCode(n.iso2,n.dialCode+s)}}}},{key:"_processPreferredCountries",value:function(){this.preferredCountries=[];for(var t=0;t<this.options.preferredCountries.length;t++){var e=this.options.preferredCountries[t].toLowerCase(),i=this._getCountryData(e,!1,!0);i&&this.preferredCountries.push(i)}}},{key:"_createEl",value:function(t,e,i){var n=document.createElement(t);return e&&u(e,function(t,e){return n.setAttribute(t,e)}),i&&i.appendChild(n),n}},{key:"_generateMarkup",value:function(){this.telInput.hasAttribute("autocomplete")||this.telInput.form&&this.telInput.form.hasAttribute("autocomplete")||this.telInput.setAttribute("autocomplete","off");var t="iti";this.options.allowDropdown&&(t+=" iti--allow-dropdown"),this.options.separateDialCode&&(t+=" iti--separate-dial-code"),this.options.customContainer&&(t+=" ",t+=this.options.customContainer);var e=this._createEl("div",{class:t});if(this.telInput.parentNode.insertBefore(e,this.telInput),this.flagsContainer=this._createEl("div",{class:"iti__flag-container"},e),e.appendChild(this.telInput),this.selectedFlag=this._createEl("div",{class:"iti__selected-flag",role:"combobox","aria-owns":"iti-".concat(this.id,"__country-listbox"),"aria-expanded":"false"},this.flagsContainer),this.selectedFlagInner=this._createEl("div",{class:"iti__flag"},this.selectedFlag),this.options.separateDialCode&&(this.selectedDialCode=this._createEl("div",{class:"iti__selected-dial-code"},this.selectedFlag)),this.options.allowDropdown&&(this.selectedFlag.setAttribute("tabindex","0"),this.dropdownArrow=this._createEl("div",{class:"iti__arrow"},this.selectedFlag),this.countryList=this._createEl("ul",{class:"iti__country-list iti__hide",id:"iti-".concat(this.id,"__country-listbox"),role:"listbox"}),this.preferredCountries.length&&(this._appendListItems(this.preferredCountries,"iti__preferred",!0),this._createEl("li",{class:"iti__divider",role:"separator","aria-disabled":"true"},this.countryList)),this._appendListItems(this.countries,"iti__standard"),this.options.dropdownContainer?(this.dropdown=this._createEl("div",{class:"iti iti--container"}),this.dropdown.appendChild(this.countryList)):this.flagsContainer.appendChild(this.countryList)),this.options.hiddenInput){var i=this.options.hiddenInput,n=this.telInput.getAttribute("name");if(n){var a=n.lastIndexOf("[");-1!==a&&(i="".concat(n.substr(0,a),"[").concat(i,"]"))}this.hiddenInput=this._createEl("input",{type:"hidden",name:i}),e.appendChild(this.hiddenInput)}}},{key:"_appendListItems",value:function(t,e,i){for(var n="",a=0;a<t.length;a++){var o=t[a],s=i?"-preferred":"";n+="<li class='iti__country ".concat(e,"' tabIndex='-1' id='iti-").concat(this.id,"__item-").concat(o.iso2).concat(s,"' role='option' data-dial-code='").concat(o.dialCode,"' data-country-code='").concat(o.iso2,"'>"),n+="<div class='iti__flag-box'><div class='iti__flag iti__".concat(o.iso2,"'></div></div>"),n+="<span class='iti__country-name'>".concat(o.name,"</span>"),n+="<span class='iti__dial-code'>+".concat(o.dialCode,"</span>"),n+="</li>"}this.countryList.insertAdjacentHTML("beforeend",n)}},{key:"_setInitialState",value:function(){var t=this.telInput.value,e=this._getDialCode(t),i=this._isRegionlessNanp(t),n=this.options,a=n.initialCountry,o=n.nationalMode,s=n.autoHideDialCode,r=n.separateDialCode;e&&!i?this._updateFlagFromNumber(t):"auto"!==a&&(a?this._setFlag(a.toLowerCase()):e&&i?this._setFlag("us"):(this.defaultCountry=this.preferredCountries.length?this.preferredCountries[0].iso2:this.countries[0].iso2,t||this._setFlag(this.defaultCountry)),t||o||s||r||(this.telInput.value="+".concat(this.selectedCountryData.dialCode))),t&&this._updateValFromNumber(t)}},{key:"_initListeners",value:function(){this._initKeyListeners(),this.options.autoHideDialCode&&this._initBlurListeners(),this.options.allowDropdown&&this._initDropdownListeners(),this.hiddenInput&&this._initHiddenInputListener()}},{key:"_initHiddenInputListener",value:function(){var t=this;this._handleHiddenInputSubmit=function(){t.hiddenInput.value=t.getNumber()},this.telInput.form&&this.telInput.form.addEventListener("submit",this._handleHiddenInputSubmit)}},{key:"_getClosestLabel",value:function(){for(var t=this.telInput;t&&"LABEL"!==t.tagName;)t=t.parentNode;return t}},{key:"_initDropdownListeners",value:function(){var t=this;this._handleLabelClick=function(e){t.countryList.classList.contains("iti__hide")?t.telInput.focus():e.preventDefault()};var e=this._getClosestLabel();e&&e.addEventListener("click",this._handleLabelClick),this._handleClickSelectedFlag=function(){!t.countryList.classList.contains("iti__hide")||t.telInput.disabled||t.telInput.readOnly||t._showDropdown()},this.selectedFlag.addEventListener("click",this._handleClickSelectedFlag),this._handleFlagsContainerKeydown=function(e){t.countryList.classList.contains("iti__hide")&&-1!==["ArrowUp","Up","ArrowDown","Down"," ","Enter"].indexOf(e.key)&&(e.preventDefault(),e.stopPropagation(),t._showDropdown()),"Tab"===e.key&&t._closeDropdown()},this.flagsContainer.addEventListener("keydown",this._handleFlagsContainerKeydown)}},{key:"_initRequests",value:function(){var t=this;this.options.utilsScript&&!window.intlTelInputUtils?window.intlTelInputGlobals.windowLoaded?window.intlTelInputGlobals.loadUtils(this.options.utilsScript):window.addEventListener("load",function(){window.intlTelInputGlobals.loadUtils(t.options.utilsScript)}):this.resolveUtilsScriptPromise(),"auto"===this.options.initialCountry?this._loadAutoCountry():this.resolveAutoCountryPromise()}},{key:"_loadAutoCountry",value:function(){window.intlTelInputGlobals.autoCountry?this.handleAutoCountry():window.intlTelInputGlobals.startedLoadingAutoCountry||(window.intlTelInputGlobals.startedLoadingAutoCountry=!0,"function"==typeof this.options.geoIpLookup&&this.options.geoIpLookup(function(t){window.intlTelInputGlobals.autoCountry=t.toLowerCase(),setTimeout(function(){return d("handleAutoCountry")})},function(){return d("rejectAutoCountryPromise")}))}},{key:"_initKeyListeners",value:function(){var t=this;this._handleKeyupEvent=function(){t._updateFlagFromNumber(t.telInput.value)&&t._triggerCountryChange()},this.telInput.addEventListener("keyup",this._handleKeyupEvent),this._handleClipboardEvent=function(){setTimeout(t._handleKeyupEvent)},this.telInput.addEventListener("cut",this._handleClipboardEvent),this.telInput.addEventListener("paste",this._handleClipboardEvent)}},{key:"_cap",value:function(t){var e=this.telInput.getAttribute("maxlength");return e&&t.length>e?t.substr(0,e):t}},{key:"_initBlurListeners",value:function(){var t=this;this._handleSubmitOrBlurEvent=function(){t._removeEmptyDialCode()},this.telInput.form&&this.telInput.form.addEventListener("submit",this._handleSubmitOrBlurEvent),this.telInput.addEventListener("blur",this._handleSubmitOrBlurEvent)}},{key:"_removeEmptyDialCode",value:function(){if("+"===this.telInput.value.charAt(0)){var t=this._getNumeric(this.telInput.value);t&&this.selectedCountryData.dialCode!==t||(this.telInput.value="")}}},{key:"_getNumeric",value:function(t){return t.replace(/\D/g,"")}},{key:"_trigger",value:function(t){var e=document.createEvent("Event");e.initEvent(t,!0,!0),this.telInput.dispatchEvent(e)}},{key:"_showDropdown",value:function(){this.countryList.classList.remove("iti__hide"),this.selectedFlag.setAttribute("aria-expanded","true"),this._setDropdownPosition(),this.activeItem&&(this._highlightListItem(this.activeItem,!1),this._scrollTo(this.activeItem,!0)),this._bindDropdownListeners(),this.dropdownArrow.classList.add("iti__arrow--up"),this._trigger("open:countrydropdown")}},{key:"_toggleClass",value:function(t,e,i){i&&!t.classList.contains(e)?t.classList.add(e):!i&&t.classList.contains(e)&&t.classList.remove(e)}},{key:"_setDropdownPosition",value:function(){var t=this;if(this.options.dropdownContainer&&this.options.dropdownContainer.appendChild(this.dropdown),!this.isMobile){var e=this.telInput.getBoundingClientRect(),i=window.pageYOffset||document.documentElement.scrollTop,n=e.top+i,a=this.countryList.offsetHeight,o=n+this.telInput.offsetHeight+a<i+window.innerHeight,s=n-a>i;if(this._toggleClass(this.countryList,"iti__country-list--dropup",!o&&s),this.options.dropdownContainer){var r=!o&&s?0:this.telInput.offsetHeight;this.dropdown.style.top="".concat(n+r,"px"),this.dropdown.style.left="".concat(e.left+document.body.scrollLeft,"px"),this._handleWindowScroll=function(){return t._closeDropdown()},window.addEventListener("scroll",this._handleWindowScroll)}}}},{key:"_getClosestListItem",value:function(t){for(var e=t;e&&e!==this.countryList&&!e.classList.contains("iti__country");)e=e.parentNode;return e===this.countryList?null:e}},{key:"_bindDropdownListeners",value:function(){var t=this;this._handleMouseoverCountryList=function(e){var i=t._getClosestListItem(e.target);i&&t._highlightListItem(i,!1)},this.countryList.addEventListener("mouseover",this._handleMouseoverCountryList),this._handleClickCountryList=function(e){var i=t._getClosestListItem(e.target);i&&t._selectListItem(i)},this.countryList.addEventListener("click",this._handleClickCountryList);var e=!0;this._handleClickOffToClose=function(){e||t._closeDropdown(),e=!1},document.documentElement.addEventListener("click",this._handleClickOffToClose);var i="",n=null;this._handleKeydownOnDropdown=function(e){e.preventDefault(),"ArrowUp"===e.key||"Up"===e.key||"ArrowDown"===e.key||"Down"===e.key?t._handleUpDownKey(e.key):"Enter"===e.key?t._handleEnterKey():"Escape"===e.key?t._closeDropdown():/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)&&(n&&clearTimeout(n),i+=e.key.toLowerCase(),t._searchForCountry(i),n=setTimeout(function(){i=""},1e3))},document.addEventListener("keydown",this._handleKeydownOnDropdown)}},{key:"_handleUpDownKey",value:function(t){var e="ArrowUp"===t||"Up"===t?this.highlightedItem.previousElementSibling:this.highlightedItem.nextElementSibling;e&&(e.classList.contains("iti__divider")&&(e="ArrowUp"===t||"Up"===t?e.previousElementSibling:e.nextElementSibling),this._highlightListItem(e,!0))}},{key:"_handleEnterKey",value:function(){this.highlightedItem&&this._selectListItem(this.highlightedItem)}},{key:"_searchForCountry",value:function(t){for(var e=0;e<this.countries.length;e++)if(this._startsWith(this.countries[e].name,t)){var i=this.countryList.querySelector("#iti-".concat(this.id,"__item-").concat(this.countries[e].iso2));this._highlightListItem(i,!1),this._scrollTo(i,!0);break}}},{key:"_startsWith",value:function(t,e){return t.substr(0,e.length).toLowerCase()===e}},{key:"_updateValFromNumber",value:function(t){var e=t;if(this.options.formatOnDisplay&&window.intlTelInputUtils&&this.selectedCountryData){var i=!this.options.separateDialCode&&(this.options.nationalMode||"+"!==e.charAt(0)),n=intlTelInputUtils.numberFormat,a=n.NATIONAL,o=n.INTERNATIONAL,s=i?a:o;e=intlTelInputUtils.formatNumber(e,this.selectedCountryData.iso2,s)}e=this._beforeSetNumber(e),this.telInput.value=e}},{key:"_updateFlagFromNumber",value:function(t){var e=t,i=this.selectedCountryData.dialCode,n="1"===i;e&&this.options.nationalMode&&n&&"+"!==e.charAt(0)&&("1"!==e.charAt(0)&&(e="1".concat(e)),e="+".concat(e)),this.options.separateDialCode&&i&&"+"!==e.charAt(0)&&(e="+".concat(i).concat(e));var a=this._getDialCode(e,!0),o=this._getNumeric(e),s=null;if(a){var r=this.countryCodes[this._getNumeric(a)],l=-1!==r.indexOf(this.selectedCountryData.iso2)&&o.length<=a.length-1;if(!("1"===i&&this._isRegionlessNanp(o))&&!l)for(var u=0;u<r.length;u++)if(r[u]){s=r[u];break}}else"+"===e.charAt(0)&&o.length?s="":e&&"+"!==e||(s=this.defaultCountry);return null!==s&&this._setFlag(s)}},{key:"_isRegionlessNanp",value:function(t){var e=this._getNumeric(t);if("1"===e.charAt(0)){var i=e.substr(1,3);return-1!==l.indexOf(i)}return!1}},{key:"_highlightListItem",value:function(t,e){var i=this.highlightedItem;i&&i.classList.remove("iti__highlight"),this.highlightedItem=t,this.highlightedItem.classList.add("iti__highlight"),e&&this.highlightedItem.focus()}},{key:"_getCountryData",value:function(t,i,n){for(var a=i?e:this.countries,o=0;o<a.length;o++)if(a[o].iso2===t)return a[o];if(n)return null;throw new Error("No country data for '".concat(t,"'"))}},{key:"_setFlag",value:function(t){var e=this.selectedCountryData.iso2?this.selectedCountryData:{};this.selectedCountryData=t?this._getCountryData(t,!1,!1):{},this.selectedCountryData.iso2&&(this.defaultCountry=this.selectedCountryData.iso2),this.selectedFlagInner.setAttribute("class","iti__flag iti__".concat(t));var i=t?"".concat(this.selectedCountryData.name,": +").concat(this.selectedCountryData.dialCode):"Unknown";if(this.selectedFlag.setAttribute("title",i),this.options.separateDialCode){var n=this.selectedCountryData.dialCode?"+".concat(this.selectedCountryData.dialCode):"";this.selectedDialCode.innerHTML=n;var a=this.selectedFlag.offsetWidth||this._getHiddenSelectedFlagWidth();this.telInput.style.paddingLeft="".concat(a+6,"px")}if(this._updatePlaceholder(),this.options.allowDropdown){var o=this.activeItem;if(o&&(o.classList.remove("iti__active"),o.setAttribute("aria-selected","false")),t){var s=this.countryList.querySelector("#iti-".concat(this.id,"__item-").concat(t,"-preferred"))||this.countryList.querySelector("#iti-".concat(this.id,"__item-").concat(t));s.setAttribute("aria-selected","true"),s.classList.add("iti__active"),this.activeItem=s,this.selectedFlag.setAttribute("aria-activedescendant",s.getAttribute("id"))}}return e.iso2!==t}},{key:"_getHiddenSelectedFlagWidth",value:function(){var t=this.telInput.parentNode.cloneNode();t.style.visibility="hidden",document.body.appendChild(t);var e=this.flagsContainer.cloneNode();t.appendChild(e);var i=this.selectedFlag.cloneNode(!0);e.appendChild(i);var n=i.offsetWidth;return t.parentNode.removeChild(t),n}},{key:"_updatePlaceholder",value:function(){var t="aggressive"===this.options.autoPlaceholder||!this.hadInitialPlaceholder&&"polite"===this.options.autoPlaceholder;if(window.intlTelInputUtils&&t){var e=intlTelInputUtils.numberType[this.options.placeholderNumberType],i=this.selectedCountryData.iso2?intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2,this.options.nationalMode,e):"";i=this._beforeSetNumber(i),"function"==typeof this.options.customPlaceholder&&(i=this.options.customPlaceholder(i,this.selectedCountryData)),this.telInput.setAttribute("placeholder",i)}}},{key:"_selectListItem",value:function(t){var e=this._setFlag(t.getAttribute("data-country-code"));this._closeDropdown(),this._updateDialCode(t.getAttribute("data-dial-code"),!0),this.telInput.focus();var i=this.telInput.value.length;this.telInput.setSelectionRange(i,i),e&&this._triggerCountryChange()}},{key:"_closeDropdown",value:function(){this.countryList.classList.add("iti__hide"),this.selectedFlag.setAttribute("aria-expanded","false"),this.dropdownArrow.classList.remove("iti__arrow--up"),document.removeEventListener("keydown",this._handleKeydownOnDropdown),document.documentElement.removeEventListener("click",this._handleClickOffToClose),this.countryList.removeEventListener("mouseover",this._handleMouseoverCountryList),this.countryList.removeEventListener("click",this._handleClickCountryList),this.options.dropdownContainer&&(this.isMobile||window.removeEventListener("scroll",this._handleWindowScroll),this.dropdown.parentNode&&this.dropdown.parentNode.removeChild(this.dropdown)),this._trigger("close:countrydropdown")}},{key:"_scrollTo",value:function(t,e){var i=this.countryList,n=window.pageYOffset||document.documentElement.scrollTop,a=i.offsetHeight,o=i.getBoundingClientRect().top+n,s=o+a,r=t.offsetHeight,l=t.getBoundingClientRect().top+n,u=l+r,d=l-o+i.scrollTop,h=a/2-r/2;if(l<o)e&&(d-=h),i.scrollTop=d;else if(u>s){e&&(d+=h);var c=a-r;i.scrollTop=d-c}}},{key:"_updateDialCode",value:function(t,e){var i,n=this.telInput.value,a="+".concat(t);if("+"===n.charAt(0)){var o=this._getDialCode(n);i=o?n.replace(o,a):a}else{if(this.options.nationalMode||this.options.separateDialCode)return;if(n)i=a+n;else{if(!e&&this.options.autoHideDialCode)return;i=a}}this.telInput.value=i}},{key:"_getDialCode",value:function(t,e){var i="";if("+"===t.charAt(0))for(var n="",a=0;a<t.length;a++){var o=t.charAt(a);if(!isNaN(parseInt(o,10))){if(n+=o,e)this.countryCodes[n]&&(i=t.substr(0,a+1));else if(this.dialCodes[n]){i=t.substr(0,a+1);break}if(n.length===this.countryCodeMaxLen)break}}return i}},{key:"_getFullNumber",value:function(){var t=this.telInput.value.trim(),e=this.selectedCountryData.dialCode,i=this._getNumeric(t);return(this.options.separateDialCode&&"+"!==t.charAt(0)&&e&&i?"+".concat(e):"")+t}},{key:"_beforeSetNumber",value:function(t){var e=t;if(this.options.separateDialCode){var i=this._getDialCode(e);if(i){var n=" "===e[(i="+".concat(this.selectedCountryData.dialCode)).length]||"-"===e[i.length]?i.length+1:i.length;e=e.substr(n)}}return this._cap(e)}},{key:"_triggerCountryChange",value:function(){this._trigger("countrychange")}},{key:"handleAutoCountry",value:function(){"auto"===this.options.initialCountry&&(this.defaultCountry=window.intlTelInputGlobals.autoCountry,this.telInput.value||this.setCountry(this.defaultCountry),this.resolveAutoCountryPromise())}},{key:"handleUtils",value:function(){window.intlTelInputUtils&&(this.telInput.value&&this._updateValFromNumber(this.telInput.value),this._updatePlaceholder()),this.resolveUtilsScriptPromise()}},{key:"destroy",value:function(){var t=this.telInput.form;if(this.options.allowDropdown){this._closeDropdown(),this.selectedFlag.removeEventListener("click",this._handleClickSelectedFlag),this.flagsContainer.removeEventListener("keydown",this._handleFlagsContainerKeydown);var e=this._getClosestLabel();e&&e.removeEventListener("click",this._handleLabelClick)}this.hiddenInput&&t&&t.removeEventListener("submit",this._handleHiddenInputSubmit),this.options.autoHideDialCode&&(t&&t.removeEventListener("submit",this._handleSubmitOrBlurEvent),this.telInput.removeEventListener("blur",this._handleSubmitOrBlurEvent)),this.telInput.removeEventListener("keyup",this._handleKeyupEvent),this.telInput.removeEventListener("cut",this._handleClipboardEvent),this.telInput.removeEventListener("paste",this._handleClipboardEvent),this.telInput.removeAttribute("data-intl-tel-input-id");var i=this.telInput.parentNode;i.parentNode.insertBefore(this.telInput,i),i.parentNode.removeChild(i),delete window.intlTelInputGlobals.instances[this.id]}},{key:"getExtension",value:function(){return window.intlTelInputUtils?intlTelInputUtils.getExtension(this._getFullNumber(),this.selectedCountryData.iso2):""}},{key:"getNumber",value:function(t){if(window.intlTelInputUtils){var e=this.selectedCountryData.iso2;return intlTelInputUtils.formatNumber(this._getFullNumber(),e,t)}return""}},{key:"getNumberType",value:function(){return window.intlTelInputUtils?intlTelInputUtils.getNumberType(this._getFullNumber(),this.selectedCountryData.iso2):-99}},{key:"getSelectedCountryData",value:function(){return this.selectedCountryData}},{key:"getValidationError",value:function(){if(window.intlTelInputUtils){var t=this.selectedCountryData.iso2;return intlTelInputUtils.getValidationError(this._getFullNumber(),t)}return-99}},{key:"isValidNumber",value:function(){var t=this._getFullNumber().trim(),e=this.options.nationalMode?this.selectedCountryData.iso2:"";return window.intlTelInputUtils?intlTelInputUtils.isValidNumber(t,e):null}},{key:"setCountry",value:function(t){var e=t.toLowerCase();this.selectedFlagInner.classList.contains("iti__".concat(e))||(this._setFlag(e),this._updateDialCode(this.selectedCountryData.dialCode,!1),this._triggerCountryChange())}},{key:"setNumber",value:function(t){var e=this._updateFlagFromNumber(t);this._updateValFromNumber(t),e&&this._triggerCountryChange()}},{key:"setPlaceholderNumberType",value:function(t){this.options.placeholderNumberType=t,this._updatePlaceholder()}}])&&a(n.prototype,o),h&&a(n,h),i}();o.getCountryData=function(){return e};var c=function(t,e,i){var n=document.createElement("script");n.onload=function(){d("handleUtils"),e&&e()},n.onerror=function(){d("rejectUtilsScriptPromise"),i&&i()},n.className="iti-load-utils",n.async=!0,n.src=t,document.body.appendChild(n)};return o.loadUtils=function(t){if(!window.intlTelInputUtils&&!window.intlTelInputGlobals.startedLoadingUtilsScript){if(window.intlTelInputGlobals.startedLoadingUtilsScript=!0,"undefined"!=typeof Promise)return new Promise(function(e,i){return c(t,e,i)});c(t)}return null},o.defaults=r,o.version="17.0.3",function(t,e){var i=new h(t,e);return i._init(),t.setAttribute("data-intl-tel-input-id",i.id),window.intlTelInputGlobals.instances[i.id]=i,i}}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGxUZWxJbnB1dC5qcyJdLCJuYW1lcyI6WyJmYWN0b3J5IiwibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyIsImludGxUZWxJbnB1dCIsInVuZGVmaW5lZCIsImFsbENvdW50cmllcyIsImkiLCJsZW5ndGgiLCJjIiwibmFtZSIsImlzbzIiLCJkaWFsQ29kZSIsInByaW9yaXR5IiwiYXJlYUNvZGVzIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsImludGxUZWxJbnB1dEdsb2JhbHMiLCJnZXRJbnN0YW5jZSIsImlucHV0IiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJpbnN0YW5jZXMiLCJkZWZhdWx0cyIsImFsbG93RHJvcGRvd24iLCJhdXRvSGlkZURpYWxDb2RlIiwiYXV0b1BsYWNlaG9sZGVyIiwiY3VzdG9tQ29udGFpbmVyIiwiY3VzdG9tUGxhY2Vob2xkZXIiLCJkcm9wZG93bkNvbnRhaW5lciIsImV4Y2x1ZGVDb3VudHJpZXMiLCJmb3JtYXRPbkRpc3BsYXkiLCJnZW9JcExvb2t1cCIsImhpZGRlbklucHV0IiwiaW5pdGlhbENvdW50cnkiLCJsb2NhbGl6ZWRDb3VudHJpZXMiLCJuYXRpb25hbE1vZGUiLCJvbmx5Q291bnRyaWVzIiwicGxhY2Vob2xkZXJOdW1iZXJUeXBlIiwicHJlZmVycmVkQ291bnRyaWVzIiwic2VwYXJhdGVEaWFsQ29kZSIsInV0aWxzU2NyaXB0IiwicmVnaW9ubGVzc05hbnBOdW1iZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvd0xvYWRlZCIsImZvckVhY2hQcm9wIiwib2JqIiwiY2FsbGJhY2siLCJrZXlzIiwiZm9yRWFjaEluc3RhbmNlIiwibWV0aG9kIiwiSXRpIiwib3B0aW9ucyIsIl90aGlzIiwidGhpcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0ZWxJbnB1dCIsImFjdGl2ZUl0ZW0iLCJoaWdobGlnaHRlZEl0ZW0iLCJjdXN0b21PcHRpb25zIiwidmFsdWUiLCJoYXNPd25Qcm9wZXJ0eSIsImhhZEluaXRpYWxQbGFjZWhvbGRlciIsIkJvb2xlYW4iLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdGhpczIiLCJpc01vYmlsZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkb2N1bWVudCIsImJvZHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJQcm9taXNlIiwiYXV0b0NvdW50cnlQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc29sdmVBdXRvQ291bnRyeVByb21pc2UiLCJyZWplY3RBdXRvQ291bnRyeVByb21pc2UiLCJ1dGlsc1NjcmlwdFByb21pc2UiLCJyZXNvbHZlVXRpbHNTY3JpcHRQcm9taXNlIiwicmVqZWN0VXRpbHNTY3JpcHRQcm9taXNlIiwicHJvbWlzZSIsImFsbCIsInNlbGVjdGVkQ291bnRyeURhdGEiLCJfcHJvY2Vzc0NvdW50cnlEYXRhIiwiX2dlbmVyYXRlTWFya3VwIiwiX3NldEluaXRpYWxTdGF0ZSIsIl9pbml0TGlzdGVuZXJzIiwiX2luaXRSZXF1ZXN0cyIsIl9wcm9jZXNzQWxsQ291bnRyaWVzIiwiX3Byb2Nlc3NDb3VudHJ5Q29kZXMiLCJfcHJvY2Vzc1ByZWZlcnJlZENvdW50cmllcyIsIl90cmFuc2xhdGVDb3VudHJpZXNCeUxvY2FsZSIsImNvdW50cmllcyIsInNvcnQiLCJfY291bnRyeU5hbWVTb3J0IiwiY291bnRyeUNvZGUiLCJjb3VudHJ5Q29kZU1heExlbiIsImNvdW50cnlDb2RlcyIsImluZGV4IiwibG93ZXJDYXNlT25seUNvdW50cmllcyIsIm1hcCIsImNvdW50cnkiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlciIsImluZGV4T2YiLCJsb3dlckNhc2VFeGNsdWRlQ291bnRyaWVzIiwiaXNvIiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIiwiZGlhbENvZGVzIiwiX2FkZENvdW50cnlDb2RlIiwiX2kiLCJfYyIsInJvb3RDb3VudHJ5Q29kZSIsImoiLCJhcmVhQ29kZSIsImsiLCJwYXJ0aWFsRGlhbENvZGUiLCJzdWJzdHIiLCJjb3VudHJ5RGF0YSIsIl9nZXRDb3VudHJ5RGF0YSIsInB1c2giLCJhdHRycyIsImNvbnRhaW5lciIsImVsIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiaGFzQXR0cmlidXRlIiwiZm9ybSIsInBhcmVudENsYXNzIiwid3JhcHBlciIsIl9jcmVhdGVFbCIsImNsYXNzIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImZsYWdzQ29udGFpbmVyIiwic2VsZWN0ZWRGbGFnIiwicm9sZSIsImFyaWEtb3ducyIsImNvbmNhdCIsImFyaWEtZXhwYW5kZWQiLCJzZWxlY3RlZEZsYWdJbm5lciIsInNlbGVjdGVkRGlhbENvZGUiLCJkcm9wZG93bkFycm93IiwiY291bnRyeUxpc3QiLCJfYXBwZW5kTGlzdEl0ZW1zIiwiYXJpYS1kaXNhYmxlZCIsImRyb3Bkb3duIiwiaGlkZGVuSW5wdXROYW1lIiwibGFzdEluZGV4T2YiLCJ0eXBlIiwiY2xhc3NOYW1lIiwicHJlZmVycmVkIiwidG1wIiwiaWRTdWZmaXgiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ2YWwiLCJfZ2V0RGlhbENvZGUiLCJpc1JlZ2lvbmxlc3NOYW5wIiwiX2lzUmVnaW9ubGVzc05hbnAiLCJfdGhpcyRvcHRpb25zIiwiX3VwZGF0ZUZsYWdGcm9tTnVtYmVyIiwiX3NldEZsYWciLCJkZWZhdWx0Q291bnRyeSIsIl91cGRhdGVWYWxGcm9tTnVtYmVyIiwiX2luaXRLZXlMaXN0ZW5lcnMiLCJfaW5pdEJsdXJMaXN0ZW5lcnMiLCJfaW5pdERyb3Bkb3duTGlzdGVuZXJzIiwiX2luaXRIaWRkZW5JbnB1dExpc3RlbmVyIiwiX3RoaXMzIiwiX2hhbmRsZUhpZGRlbklucHV0U3VibWl0IiwiZ2V0TnVtYmVyIiwidGFnTmFtZSIsIl90aGlzNCIsIl9oYW5kbGVMYWJlbENsaWNrIiwiZSIsImNvbnRhaW5zIiwiZm9jdXMiLCJwcmV2ZW50RGVmYXVsdCIsImxhYmVsIiwiX2dldENsb3Nlc3RMYWJlbCIsIl9oYW5kbGVDbGlja1NlbGVjdGVkRmxhZyIsImRpc2FibGVkIiwicmVhZE9ubHkiLCJfc2hvd0Ryb3Bkb3duIiwiX2hhbmRsZUZsYWdzQ29udGFpbmVyS2V5ZG93biIsInN0b3BQcm9wYWdhdGlvbiIsIl9jbG9zZURyb3Bkb3duIiwiX3RoaXM1IiwiaW50bFRlbElucHV0VXRpbHMiLCJsb2FkVXRpbHMiLCJfbG9hZEF1dG9Db3VudHJ5IiwiYXV0b0NvdW50cnkiLCJoYW5kbGVBdXRvQ291bnRyeSIsInN0YXJ0ZWRMb2FkaW5nQXV0b0NvdW50cnkiLCJzZXRUaW1lb3V0IiwiX3RoaXM2IiwiX2hhbmRsZUtleXVwRXZlbnQiLCJfdHJpZ2dlckNvdW50cnlDaGFuZ2UiLCJfaGFuZGxlQ2xpcGJvYXJkRXZlbnQiLCJudW1iZXIiLCJtYXgiLCJfdGhpczciLCJfaGFuZGxlU3VibWl0T3JCbHVyRXZlbnQiLCJfcmVtb3ZlRW1wdHlEaWFsQ29kZSIsImNoYXJBdCIsIm51bWVyaWMiLCJfZ2V0TnVtZXJpYyIsInMiLCJyZXBsYWNlIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwicmVtb3ZlIiwiX3NldERyb3Bkb3duUG9zaXRpb24iLCJfaGlnaGxpZ2h0TGlzdEl0ZW0iLCJfc2Nyb2xsVG8iLCJfYmluZERyb3Bkb3duTGlzdGVuZXJzIiwiX3RyaWdnZXIiLCJzaG91bGRIYXZlQ2xhc3MiLCJfdGhpczgiLCJwb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5kb3dUb3AiLCJwYWdlWU9mZnNldCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsImlucHV0VG9wIiwidG9wIiwiZHJvcGRvd25IZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJkcm9wZG93bkZpdHNCZWxvdyIsImlubmVySGVpZ2h0IiwiZHJvcGRvd25GaXRzQWJvdmUiLCJfdG9nZ2xlQ2xhc3MiLCJleHRyYVRvcCIsInN0eWxlIiwibGVmdCIsInNjcm9sbExlZnQiLCJfaGFuZGxlV2luZG93U2Nyb2xsIiwiX3RoaXM5IiwiX2hhbmRsZU1vdXNlb3ZlckNvdW50cnlMaXN0IiwibGlzdEl0ZW0iLCJfZ2V0Q2xvc2VzdExpc3RJdGVtIiwiX2hhbmRsZUNsaWNrQ291bnRyeUxpc3QiLCJfc2VsZWN0TGlzdEl0ZW0iLCJpc09wZW5pbmciLCJfaGFuZGxlQ2xpY2tPZmZUb0Nsb3NlIiwicXVlcnkiLCJxdWVyeVRpbWVyIiwiX2hhbmRsZUtleWRvd25PbkRyb3Bkb3duIiwiX2hhbmRsZVVwRG93bktleSIsIl9oYW5kbGVFbnRlcktleSIsImNsZWFyVGltZW91dCIsIl9zZWFyY2hGb3JDb3VudHJ5IiwibmV4dCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXh0RWxlbWVudFNpYmxpbmciLCJfc3RhcnRzV2l0aCIsInF1ZXJ5U2VsZWN0b3IiLCJvcmlnaW5hbE51bWJlciIsInVzZU5hdGlvbmFsIiwiX2ludGxUZWxJbnB1dFV0aWxzJG51IiwibnVtYmVyRm9ybWF0IiwiTkFUSU9OQUwiLCJJTlRFUk5BVElPTkFMIiwiZm9ybWF0IiwiZm9ybWF0TnVtYmVyIiwiX2JlZm9yZVNldE51bWJlciIsImlzTmFucCIsImFscmVhZHlTZWxlY3RlZCIsInNob3VsZEZvY3VzIiwicHJldkl0ZW0iLCJpZ25vcmVPbmx5Q291bnRyaWVzT3B0aW9uIiwiYWxsb3dGYWlsIiwiRXJyb3IiLCJwcmV2Q291bnRyeSIsInRpdGxlIiwiaW5uZXJIVE1MIiwic2VsZWN0ZWRGbGFnV2lkdGgiLCJvZmZzZXRXaWR0aCIsIl9nZXRIaWRkZW5TZWxlY3RlZEZsYWdXaWR0aCIsInBhZGRpbmdMZWZ0IiwiX3VwZGF0ZVBsYWNlaG9sZGVyIiwibmV4dEl0ZW0iLCJjb250YWluZXJDbG9uZSIsImNsb25lTm9kZSIsInZpc2liaWxpdHkiLCJmbGFnc0NvbnRhaW5lckNsb25lIiwic2VsZWN0ZWRGbGFnQ2xvbmUiLCJ3aWR0aCIsInJlbW92ZUNoaWxkIiwic2hvdWxkU2V0UGxhY2Vob2xkZXIiLCJudW1iZXJUeXBlIiwicGxhY2Vob2xkZXIiLCJnZXRFeGFtcGxlTnVtYmVyIiwiZmxhZ0NoYW5nZWQiLCJfdXBkYXRlRGlhbENvZGUiLCJsZW4iLCJzZXRTZWxlY3Rpb25SYW5nZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbGVtZW50IiwibWlkZGxlIiwiY29udGFpbmVySGVpZ2h0IiwiY29udGFpbmVyVG9wIiwiY29udGFpbmVyQm90dG9tIiwiZWxlbWVudEhlaWdodCIsImVsZW1lbnRUb3AiLCJlbGVtZW50Qm90dG9tIiwibmV3U2Nyb2xsVG9wIiwibWlkZGxlT2Zmc2V0IiwiaGVpZ2h0RGlmZmVyZW5jZSIsIm5ld0RpYWxDb2RlQmFyZSIsImhhc1NlbGVjdGVkTGlzdEl0ZW0iLCJuZXdOdW1iZXIiLCJpbnB1dFZhbCIsIm5ld0RpYWxDb2RlIiwicHJldkRpYWxDb2RlIiwiaW5jbHVkZUFyZWFDb2RlIiwibnVtZXJpY0NoYXJzIiwiaXNOYU4iLCJwYXJzZUludCIsInRyaW0iLCJudW1lcmljVmFsIiwic3RhcnQiLCJfY2FwIiwic2V0Q291bnRyeSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEV4dGVuc2lvbiIsIl9nZXRGdWxsTnVtYmVyIiwiZ2V0TnVtYmVyVHlwZSIsImdldFZhbGlkYXRpb25FcnJvciIsImlzVmFsaWROdW1iZXIiLCJvcmlnaW5hbENvdW50cnlDb2RlIiwicHJvdG90eXBlIiwiZ2V0Q291bnRyeURhdGEiLCJpbmplY3RTY3JpcHQiLCJwYXRoIiwiaGFuZGxlU3VjY2VzcyIsImhhbmRsZUZhaWx1cmUiLCJzY3JpcHQiLCJvbmxvYWQiLCJvbmVycm9yIiwiYXN5bmMiLCJzcmMiLCJzdGFydGVkTG9hZGluZ1V0aWxzU2NyaXB0IiwidmVyc2lvbiIsIml0aSIsIl9pbml0Il0sIm1hcHBpbmdzIjoiQ0FPQSxTQUFVQSxHQUNnQixpQkFBWEMsUUFB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QTJvQ0FsQyxFQUFvQnVVLGVBQWlCLFdBQ2pDLE9BQU8xVixHQUdYLElBQUkyVixFQUFlLFNBQXNCQyxFQUFNQyxFQUFlQyxHQUUxRCxJQUFJQyxFQUFTblIsU0FBUzJELGNBQWMsVUFDcEN3TixFQUFPQyxPQUFTLFdBQ1o3UyxFQUFnQixlQUNaMFMsR0FBZUEsS0FFdkJFLEVBQU9FLFFBQVUsV0FDYjlTLEVBQWdCLDRCQUNaMlMsR0FBZUEsS0FFdkJDLEVBQU83TCxVQUFZLGlCQUNuQjZMLEVBQU9HLE9BQVEsRUFDZkgsRUFBT0ksSUFBTVAsRUFDYmhSLFNBQVNDLEtBQUs0RCxZQUFZc04sSUEwQjlCLE9BdkJBNVUsRUFBb0JzTCxVQUFZLFNBQVNtSixHQUtyQyxJQUFLL1YsT0FBTzJNLG9CQUFzQjNNLE9BQU9zQixvQkFBb0JpViwwQkFBMkIsQ0FJcEYsR0FGQXZXLE9BQU9zQixvQkFBb0JpViwyQkFBNEIsRUFFaEMsb0JBQVpwUixRQUNQLE9BQU8sSUFBSUEsUUFBUSxTQUFTRSxFQUFTQyxHQUNqQyxPQUFPd1EsRUFBYUMsRUFBTTFRLEVBQVNDLEtBRzNDd1EsRUFBYUMsR0FFakIsT0FBTyxNQUdYelUsRUFBb0JNLFNBQVdBLEVBRS9CTixFQUFvQmtWLFFBQVUsU0FFdkIsU0FBU2hWLEVBQU9pQyxHQUNuQixJQUFJZ1QsRUFBTSxJQUFJalQsRUFBSWhDLEVBQU9pQyxHQUl6QixPQUhBZ1QsRUFBSUMsUUFDSmxWLEVBQU1tSCxhQUFhLHlCQUEwQjhOLEVBQUloVixJQUNqRHpCLE9BQU9zQixvQkFBb0JLLFVBQVU4VSxFQUFJaFYsSUFBTWdWLEVBQ3hDQSxHQXJ6Q1IiLCJmaWxlIjoiaW50bFRlbElucHV0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBJbnRlcm5hdGlvbmFsIFRlbGVwaG9uZSBJbnB1dCB2MTcuMC4zXG4gKiBodHRwczovL2dpdGh1Yi5jb20vamFja29jbnIvaW50bC10ZWwtaW5wdXQuZ2l0XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuXG4vLyB3cmFwIGluIFVNRFxuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IGVsc2Ugd2luZG93LmludGxUZWxJbnB1dCA9IGZhY3RvcnkoKTtcbn0pKGZ1bmN0aW9uKHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQXJyYXkgb2YgY291bnRyeSBvYmplY3RzIGZvciB0aGUgZmxhZyBkcm9wZG93bi5cbiAgICAgICAgLy8gSGVyZSBpcyB0aGUgY3JpdGVyaWEgZm9yIHRoZSBwbHVnaW4gdG8gc3VwcG9ydCBhIGdpdmVuIGNvdW50cnkvdGVycml0b3J5XG4gICAgICAgIC8vIC0gSXQgaGFzIGFuIGlzbzIgY29kZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzMxNjYtMV9hbHBoYS0yXG4gICAgICAgIC8vIC0gSXQgaGFzIGl0J3Mgb3duIGNvdW50cnkgY2FsbGluZyBjb2RlIChpdCBpcyBub3QgYSBzdWItcmVnaW9uIG9mIGFub3RoZXIgY291bnRyeSk6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfY291bnRyeV9jYWxsaW5nX2NvZGVzXG4gICAgICAgIC8vIC0gSXQgaGFzIGEgZmxhZyBpbiB0aGUgcmVnaW9uLWZsYWdzIHByb2plY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWhkYWQvcmVnaW9uLWZsYWdzL3RyZWUvZ2gtcGFnZXMvcG5nXG4gICAgICAgIC8vIC0gSXQgaXMgc3VwcG9ydGVkIGJ5IGxpYnBob25lbnVtYmVyIChpdCBtdXN0IGJlIGxpc3RlZCBvbiB0aGlzIHBhZ2UpOiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlaTE4bi9saWJwaG9uZW51bWJlci9ibG9iL21hc3Rlci9yZXNvdXJjZXMvU2hvcnROdW1iZXJNZXRhZGF0YS54bWxcbiAgICAgICAgLy8gRWFjaCBjb3VudHJ5IGFycmF5IGhhcyB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOlxuICAgICAgICAvLyBbXG4gICAgICAgIC8vICAgIENvdW50cnkgbmFtZSxcbiAgICAgICAgLy8gICAgaXNvMiBjb2RlLFxuICAgICAgICAvLyAgICBJbnRlcm5hdGlvbmFsIGRpYWwgY29kZSxcbiAgICAgICAgLy8gICAgT3JkZXIgKGlmID4xIGNvdW50cnkgd2l0aCBzYW1lIGRpYWwgY29kZSksXG4gICAgICAgIC8vICAgIEFyZWEgY29kZXNcbiAgICAgICAgLy8gXVxuICAgICAgICB2YXIgYWxsQ291bnRyaWVzID0gWyBbIFwiQWZnaGFuaXN0YW4gKOKAq9in2YHYutin2YbYs9iq2KfZhuKArOKAjilcIiwgXCJhZlwiLCBcIjkzXCIgXSwgWyBcIkFsYmFuaWEgKFNocWlww6tyaSlcIiwgXCJhbFwiLCBcIjM1NVwiIF0sIFsgXCJBbGdlcmlhICjigKvYp9mE2KzYstin2KbYseKArOKAjilcIiwgXCJkelwiLCBcIjIxM1wiIF0sIFsgXCJBbWVyaWNhbiBTYW1vYVwiLCBcImFzXCIsIFwiMVwiLCA1LCBbIFwiNjg0XCIgXSBdLCBbIFwiQW5kb3JyYVwiLCBcImFkXCIsIFwiMzc2XCIgXSwgWyBcIkFuZ29sYVwiLCBcImFvXCIsIFwiMjQ0XCIgXSwgWyBcIkFuZ3VpbGxhXCIsIFwiYWlcIiwgXCIxXCIsIDYsIFsgXCIyNjRcIiBdIF0sIFsgXCJBbnRpZ3VhIGFuZCBCYXJidWRhXCIsIFwiYWdcIiwgXCIxXCIsIDcsIFsgXCIyNjhcIiBdIF0sIFsgXCJBcmdlbnRpbmFcIiwgXCJhclwiLCBcIjU0XCIgXSwgWyBcIkFybWVuaWEgKNWA1aHVtdWh1b3Vv9Wh1bYpXCIsIFwiYW1cIiwgXCIzNzRcIiBdLCBbIFwiQXJ1YmFcIiwgXCJhd1wiLCBcIjI5N1wiIF0sIFsgXCJBdXN0cmFsaWFcIiwgXCJhdVwiLCBcIjYxXCIsIDAgXSwgWyBcIkF1c3RyaWEgKMOWc3RlcnJlaWNoKVwiLCBcImF0XCIsIFwiNDNcIiBdLCBbIFwiQXplcmJhaWphbiAoQXrJmXJiYXljYW4pXCIsIFwiYXpcIiwgXCI5OTRcIiBdLCBbIFwiQmFoYW1hc1wiLCBcImJzXCIsIFwiMVwiLCA4LCBbIFwiMjQyXCIgXSBdLCBbIFwiQmFocmFpbiAo4oCr2KfZhNio2K3YsdmK2YbigKzigI4pXCIsIFwiYmhcIiwgXCI5NzNcIiBdLCBbIFwiQmFuZ2xhZGVzaCAo4Kas4Ka+4KaC4Kay4Ka+4Kam4KeH4Ka2KVwiLCBcImJkXCIsIFwiODgwXCIgXSwgWyBcIkJhcmJhZG9zXCIsIFwiYmJcIiwgXCIxXCIsIDksIFsgXCIyNDZcIiBdIF0sIFsgXCJCZWxhcnVzICjQkdC10LvQsNGA0YPRgdGMKVwiLCBcImJ5XCIsIFwiMzc1XCIgXSwgWyBcIkJlbGdpdW0gKEJlbGdpw6spXCIsIFwiYmVcIiwgXCIzMlwiIF0sIFsgXCJCZWxpemVcIiwgXCJielwiLCBcIjUwMVwiIF0sIFsgXCJCZW5pbiAoQsOpbmluKVwiLCBcImJqXCIsIFwiMjI5XCIgXSwgWyBcIkJlcm11ZGFcIiwgXCJibVwiLCBcIjFcIiwgMTAsIFsgXCI0NDFcIiBdIF0sIFsgXCJCaHV0YW4gKOC9oOC9luC+suC9tOC9gilcIiwgXCJidFwiLCBcIjk3NVwiIF0sIFsgXCJCb2xpdmlhXCIsIFwiYm9cIiwgXCI1OTFcIiBdLCBbIFwiQm9zbmlhIGFuZCBIZXJ6ZWdvdmluYSAo0JHQvtGB0L3QsCDQuCDQpdC10YDRhtC10LPQvtCy0LjQvdCwKVwiLCBcImJhXCIsIFwiMzg3XCIgXSwgWyBcIkJvdHN3YW5hXCIsIFwiYndcIiwgXCIyNjdcIiBdLCBbIFwiQnJhemlsIChCcmFzaWwpXCIsIFwiYnJcIiwgXCI1NVwiIF0sIFsgXCJCcml0aXNoIEluZGlhbiBPY2VhbiBUZXJyaXRvcnlcIiwgXCJpb1wiLCBcIjI0NlwiIF0sIFsgXCJCcml0aXNoIFZpcmdpbiBJc2xhbmRzXCIsIFwidmdcIiwgXCIxXCIsIDExLCBbIFwiMjg0XCIgXSBdLCBbIFwiQnJ1bmVpXCIsIFwiYm5cIiwgXCI2NzNcIiBdLCBbIFwiQnVsZ2FyaWEgKNCR0YrQu9Cz0LDRgNC40Y8pXCIsIFwiYmdcIiwgXCIzNTlcIiBdLCBbIFwiQnVya2luYSBGYXNvXCIsIFwiYmZcIiwgXCIyMjZcIiBdLCBbIFwiQnVydW5kaSAoVWJ1cnVuZGkpXCIsIFwiYmlcIiwgXCIyNTdcIiBdLCBbIFwiQ2FtYm9kaWEgKOGegOGemOGfkuGeluGeu+Geh+GetilcIiwgXCJraFwiLCBcIjg1NVwiIF0sIFsgXCJDYW1lcm9vbiAoQ2FtZXJvdW4pXCIsIFwiY21cIiwgXCIyMzdcIiBdLCBbIFwiQ2FuYWRhXCIsIFwiY2FcIiwgXCIxXCIsIDEsIFsgXCIyMDRcIiwgXCIyMjZcIiwgXCIyMzZcIiwgXCIyNDlcIiwgXCIyNTBcIiwgXCIyODlcIiwgXCIzMDZcIiwgXCIzNDNcIiwgXCIzNjVcIiwgXCIzODdcIiwgXCI0MDNcIiwgXCI0MTZcIiwgXCI0MThcIiwgXCI0MzFcIiwgXCI0MzdcIiwgXCI0MzhcIiwgXCI0NTBcIiwgXCI1MDZcIiwgXCI1MTRcIiwgXCI1MTlcIiwgXCI1NDhcIiwgXCI1NzlcIiwgXCI1ODFcIiwgXCI1ODdcIiwgXCI2MDRcIiwgXCI2MTNcIiwgXCI2MzlcIiwgXCI2NDdcIiwgXCI2NzJcIiwgXCI3MDVcIiwgXCI3MDlcIiwgXCI3NDJcIiwgXCI3NzhcIiwgXCI3ODBcIiwgXCI3ODJcIiwgXCI4MDdcIiwgXCI4MTlcIiwgXCI4MjVcIiwgXCI4NjdcIiwgXCI4NzNcIiwgXCI5MDJcIiwgXCI5MDVcIiBdIF0sIFsgXCJDYXBlIFZlcmRlIChLYWJ1IFZlcmRpKVwiLCBcImN2XCIsIFwiMjM4XCIgXSwgWyBcIkNhcmliYmVhbiBOZXRoZXJsYW5kc1wiLCBcImJxXCIsIFwiNTk5XCIsIDEsIFsgXCIzXCIsIFwiNFwiLCBcIjdcIiBdIF0sIFsgXCJDYXltYW4gSXNsYW5kc1wiLCBcImt5XCIsIFwiMVwiLCAxMiwgWyBcIjM0NVwiIF0gXSwgWyBcIkNlbnRyYWwgQWZyaWNhbiBSZXB1YmxpYyAoUsOpcHVibGlxdWUgY2VudHJhZnJpY2FpbmUpXCIsIFwiY2ZcIiwgXCIyMzZcIiBdLCBbIFwiQ2hhZCAoVGNoYWQpXCIsIFwidGRcIiwgXCIyMzVcIiBdLCBbIFwiQ2hpbGVcIiwgXCJjbFwiLCBcIjU2XCIgXSwgWyBcIkNoaW5hICjkuK3lm70pXCIsIFwiY25cIiwgXCI4NlwiIF0sIFsgXCJDaHJpc3RtYXMgSXNsYW5kXCIsIFwiY3hcIiwgXCI2MVwiLCAyLCBbIFwiODkxNjRcIiBdIF0sIFsgXCJDb2NvcyAoS2VlbGluZykgSXNsYW5kc1wiLCBcImNjXCIsIFwiNjFcIiwgMSwgWyBcIjg5MTYyXCIgXSBdLCBbIFwiQ29sb21iaWFcIiwgXCJjb1wiLCBcIjU3XCIgXSwgWyBcIkNvbW9yb3MgKOKAq9is2LLYsSDYp9mE2YLZhdix4oCs4oCOKVwiLCBcImttXCIsIFwiMjY5XCIgXSwgWyBcIkNvbmdvIChEUkMpIChKYW1odXJpIHlhIEtpZGVtb2tyYXNpYSB5YSBLb25nbylcIiwgXCJjZFwiLCBcIjI0M1wiIF0sIFsgXCJDb25nbyAoUmVwdWJsaWMpIChDb25nby1CcmF6emF2aWxsZSlcIiwgXCJjZ1wiLCBcIjI0MlwiIF0sIFsgXCJDb29rIElzbGFuZHNcIiwgXCJja1wiLCBcIjY4MlwiIF0sIFsgXCJDb3N0YSBSaWNhXCIsIFwiY3JcIiwgXCI1MDZcIiBdLCBbIFwiQ8O0dGUgZOKAmUl2b2lyZVwiLCBcImNpXCIsIFwiMjI1XCIgXSwgWyBcIkNyb2F0aWEgKEhydmF0c2thKVwiLCBcImhyXCIsIFwiMzg1XCIgXSwgWyBcIkN1YmFcIiwgXCJjdVwiLCBcIjUzXCIgXSwgWyBcIkN1cmHDp2FvXCIsIFwiY3dcIiwgXCI1OTlcIiwgMCBdLCBbIFwiQ3lwcnVzICjOms+Nz4DPgc6/z4IpXCIsIFwiY3lcIiwgXCIzNTdcIiBdLCBbIFwiQ3plY2ggUmVwdWJsaWMgKMSMZXNrw6EgcmVwdWJsaWthKVwiLCBcImN6XCIsIFwiNDIwXCIgXSwgWyBcIkRlbm1hcmsgKERhbm1hcmspXCIsIFwiZGtcIiwgXCI0NVwiIF0sIFsgXCJEamlib3V0aVwiLCBcImRqXCIsIFwiMjUzXCIgXSwgWyBcIkRvbWluaWNhXCIsIFwiZG1cIiwgXCIxXCIsIDEzLCBbIFwiNzY3XCIgXSBdLCBbIFwiRG9taW5pY2FuIFJlcHVibGljIChSZXDDumJsaWNhIERvbWluaWNhbmEpXCIsIFwiZG9cIiwgXCIxXCIsIDIsIFsgXCI4MDlcIiwgXCI4MjlcIiwgXCI4NDlcIiBdIF0sIFsgXCJFY3VhZG9yXCIsIFwiZWNcIiwgXCI1OTNcIiBdLCBbIFwiRWd5cHQgKOKAq9mF2LXYseKArOKAjilcIiwgXCJlZ1wiLCBcIjIwXCIgXSwgWyBcIkVsIFNhbHZhZG9yXCIsIFwic3ZcIiwgXCI1MDNcIiBdLCBbIFwiRXF1YXRvcmlhbCBHdWluZWEgKEd1aW5lYSBFY3VhdG9yaWFsKVwiLCBcImdxXCIsIFwiMjQwXCIgXSwgWyBcIkVyaXRyZWFcIiwgXCJlclwiLCBcIjI5MVwiIF0sIFsgXCJFc3RvbmlhIChFZXN0aSlcIiwgXCJlZVwiLCBcIjM3MlwiIF0sIFsgXCJFdGhpb3BpYVwiLCBcImV0XCIsIFwiMjUxXCIgXSwgWyBcIkZhbGtsYW5kIElzbGFuZHMgKElzbGFzIE1hbHZpbmFzKVwiLCBcImZrXCIsIFwiNTAwXCIgXSwgWyBcIkZhcm9lIElzbGFuZHMgKEbDuHJveWFyKVwiLCBcImZvXCIsIFwiMjk4XCIgXSwgWyBcIkZpamlcIiwgXCJmalwiLCBcIjY3OVwiIF0sIFsgXCJGaW5sYW5kIChTdW9taSlcIiwgXCJmaVwiLCBcIjM1OFwiLCAwIF0sIFsgXCJGcmFuY2VcIiwgXCJmclwiLCBcIjMzXCIgXSwgWyBcIkZyZW5jaCBHdWlhbmEgKEd1eWFuZSBmcmFuw6dhaXNlKVwiLCBcImdmXCIsIFwiNTk0XCIgXSwgWyBcIkZyZW5jaCBQb2x5bmVzaWEgKFBvbHluw6lzaWUgZnJhbsOnYWlzZSlcIiwgXCJwZlwiLCBcIjY4OVwiIF0sIFsgXCJHYWJvblwiLCBcImdhXCIsIFwiMjQxXCIgXSwgWyBcIkdhbWJpYVwiLCBcImdtXCIsIFwiMjIwXCIgXSwgWyBcIkdlb3JnaWEgKOGDoeGDkOGDpeGDkOGDoOGDl+GDleGDlOGDmuGDnSlcIiwgXCJnZVwiLCBcIjk5NVwiIF0sIFsgXCJHZXJtYW55IChEZXV0c2NobGFuZClcIiwgXCJkZVwiLCBcIjQ5XCIgXSwgWyBcIkdoYW5hIChHYWFuYSlcIiwgXCJnaFwiLCBcIjIzM1wiIF0sIFsgXCJHaWJyYWx0YXJcIiwgXCJnaVwiLCBcIjM1MFwiIF0sIFsgXCJHcmVlY2UgKM6VzrvOu86szrTOsSlcIiwgXCJnclwiLCBcIjMwXCIgXSwgWyBcIkdyZWVubGFuZCAoS2FsYWFsbGl0IE51bmFhdClcIiwgXCJnbFwiLCBcIjI5OVwiIF0sIFsgXCJHcmVuYWRhXCIsIFwiZ2RcIiwgXCIxXCIsIDE0LCBbIFwiNDczXCIgXSBdLCBbIFwiR3VhZGVsb3VwZVwiLCBcImdwXCIsIFwiNTkwXCIsIDAgXSwgWyBcIkd1YW1cIiwgXCJndVwiLCBcIjFcIiwgMTUsIFsgXCI2NzFcIiBdIF0sIFsgXCJHdWF0ZW1hbGFcIiwgXCJndFwiLCBcIjUwMlwiIF0sIFsgXCJHdWVybnNleVwiLCBcImdnXCIsIFwiNDRcIiwgMSwgWyBcIjE0ODFcIiwgXCI3NzgxXCIsIFwiNzgzOVwiLCBcIjc5MTFcIiBdIF0sIFsgXCJHdWluZWEgKEd1aW7DqWUpXCIsIFwiZ25cIiwgXCIyMjRcIiBdLCBbIFwiR3VpbmVhLUJpc3NhdSAoR3VpbsOpIEJpc3NhdSlcIiwgXCJnd1wiLCBcIjI0NVwiIF0sIFsgXCJHdXlhbmFcIiwgXCJneVwiLCBcIjU5MlwiIF0sIFsgXCJIYWl0aVwiLCBcImh0XCIsIFwiNTA5XCIgXSwgWyBcIkhvbmR1cmFzXCIsIFwiaG5cIiwgXCI1MDRcIiBdLCBbIFwiSG9uZyBLb25nICjpppnmuK8pXCIsIFwiaGtcIiwgXCI4NTJcIiBdLCBbIFwiSHVuZ2FyeSAoTWFneWFyb3JzesOhZylcIiwgXCJodVwiLCBcIjM2XCIgXSwgWyBcIkljZWxhbmQgKMONc2xhbmQpXCIsIFwiaXNcIiwgXCIzNTRcIiBdLCBbIFwiSW5kaWEgKOCkreCkvuCksOCkpClcIiwgXCJpblwiLCBcIjkxXCIgXSwgWyBcIkluZG9uZXNpYVwiLCBcImlkXCIsIFwiNjJcIiBdLCBbIFwiSXJhbiAo4oCr2KfbjNix2KfZhuKArOKAjilcIiwgXCJpclwiLCBcIjk4XCIgXSwgWyBcIklyYXEgKOKAq9in2YTYudix2KfZguKArOKAjilcIiwgXCJpcVwiLCBcIjk2NFwiIF0sIFsgXCJJcmVsYW5kXCIsIFwiaWVcIiwgXCIzNTNcIiBdLCBbIFwiSXNsZSBvZiBNYW5cIiwgXCJpbVwiLCBcIjQ0XCIsIDIsIFsgXCIxNjI0XCIsIFwiNzQ1NzZcIiwgXCI3NTI0XCIsIFwiNzkyNFwiLCBcIjc2MjRcIiBdIF0sIFsgXCJJc3JhZWwgKOKAq9eZ16nXqNeQ15zigKzigI4pXCIsIFwiaWxcIiwgXCI5NzJcIiBdLCBbIFwiSXRhbHkgKEl0YWxpYSlcIiwgXCJpdFwiLCBcIjM5XCIsIDAgXSwgWyBcIkphbWFpY2FcIiwgXCJqbVwiLCBcIjFcIiwgNCwgWyBcIjg3NlwiLCBcIjY1OFwiIF0gXSwgWyBcIkphcGFuICjml6XmnKwpXCIsIFwianBcIiwgXCI4MVwiIF0sIFsgXCJKZXJzZXlcIiwgXCJqZVwiLCBcIjQ0XCIsIDMsIFsgXCIxNTM0XCIsIFwiNzUwOVwiLCBcIjc3MDBcIiwgXCI3Nzk3XCIsIFwiNzgyOVwiLCBcIjc5MzdcIiBdIF0sIFsgXCJKb3JkYW4gKOKAq9in2YTYo9ix2K/ZhuKArOKAjilcIiwgXCJqb1wiLCBcIjk2MlwiIF0sIFsgXCJLYXpha2hzdGFuICjQmtCw0LfQsNGF0YHRgtCw0L0pXCIsIFwia3pcIiwgXCI3XCIsIDEsIFsgXCIzM1wiLCBcIjdcIiBdIF0sIFsgXCJLZW55YVwiLCBcImtlXCIsIFwiMjU0XCIgXSwgWyBcIktpcmliYXRpXCIsIFwia2lcIiwgXCI2ODZcIiBdLCBbIFwiS29zb3ZvXCIsIFwieGtcIiwgXCIzODNcIiBdLCBbIFwiS3V3YWl0ICjigKvYp9mE2YPZiNmK2KrigKzigI4pXCIsIFwia3dcIiwgXCI5NjVcIiBdLCBbIFwiS3lyZ3l6c3RhbiAo0JrRi9GA0LPRi9C30YHRgtCw0L0pXCIsIFwia2dcIiwgXCI5OTZcIiBdLCBbIFwiTGFvcyAo4Lql4Lqy4LqnKVwiLCBcImxhXCIsIFwiODU2XCIgXSwgWyBcIkxhdHZpYSAoTGF0dmlqYSlcIiwgXCJsdlwiLCBcIjM3MVwiIF0sIFsgXCJMZWJhbm9uICjigKvZhNio2YbYp9mG4oCs4oCOKVwiLCBcImxiXCIsIFwiOTYxXCIgXSwgWyBcIkxlc290aG9cIiwgXCJsc1wiLCBcIjI2NlwiIF0sIFsgXCJMaWJlcmlhXCIsIFwibHJcIiwgXCIyMzFcIiBdLCBbIFwiTGlieWEgKOKAq9mE2YrYqNmK2KfigKzigI4pXCIsIFwibHlcIiwgXCIyMThcIiBdLCBbIFwiTGllY2h0ZW5zdGVpblwiLCBcImxpXCIsIFwiNDIzXCIgXSwgWyBcIkxpdGh1YW5pYSAoTGlldHV2YSlcIiwgXCJsdFwiLCBcIjM3MFwiIF0sIFsgXCJMdXhlbWJvdXJnXCIsIFwibHVcIiwgXCIzNTJcIiBdLCBbIFwiTWFjYXUgKOa+s+mWgClcIiwgXCJtb1wiLCBcIjg1M1wiIF0sIFsgXCJNYWNlZG9uaWEgKEZZUk9NKSAo0JzQsNC60LXQtNC+0L3QuNGY0LApXCIsIFwibWtcIiwgXCIzODlcIiBdLCBbIFwiTWFkYWdhc2NhciAoTWFkYWdhc2lrYXJhKVwiLCBcIm1nXCIsIFwiMjYxXCIgXSwgWyBcIk1hbGF3aVwiLCBcIm13XCIsIFwiMjY1XCIgXSwgWyBcIk1hbGF5c2lhXCIsIFwibXlcIiwgXCI2MFwiIF0sIFsgXCJNYWxkaXZlc1wiLCBcIm12XCIsIFwiOTYwXCIgXSwgWyBcIk1hbGlcIiwgXCJtbFwiLCBcIjIyM1wiIF0sIFsgXCJNYWx0YVwiLCBcIm10XCIsIFwiMzU2XCIgXSwgWyBcIk1hcnNoYWxsIElzbGFuZHNcIiwgXCJtaFwiLCBcIjY5MlwiIF0sIFsgXCJNYXJ0aW5pcXVlXCIsIFwibXFcIiwgXCI1OTZcIiBdLCBbIFwiTWF1cml0YW5pYSAo4oCr2YXZiNix2YrYqtin2YbZitin4oCs4oCOKVwiLCBcIm1yXCIsIFwiMjIyXCIgXSwgWyBcIk1hdXJpdGl1cyAoTW9yaXMpXCIsIFwibXVcIiwgXCIyMzBcIiBdLCBbIFwiTWF5b3R0ZVwiLCBcInl0XCIsIFwiMjYyXCIsIDEsIFsgXCIyNjlcIiwgXCI2MzlcIiBdIF0sIFsgXCJNZXhpY28gKE3DqXhpY28pXCIsIFwibXhcIiwgXCI1MlwiIF0sIFsgXCJNaWNyb25lc2lhXCIsIFwiZm1cIiwgXCI2OTFcIiBdLCBbIFwiTW9sZG92YSAoUmVwdWJsaWNhIE1vbGRvdmEpXCIsIFwibWRcIiwgXCIzNzNcIiBdLCBbIFwiTW9uYWNvXCIsIFwibWNcIiwgXCIzNzdcIiBdLCBbIFwiTW9uZ29saWEgKNCc0L7QvdCz0L7QuylcIiwgXCJtblwiLCBcIjk3NlwiIF0sIFsgXCJNb250ZW5lZ3JvIChDcm5hIEdvcmEpXCIsIFwibWVcIiwgXCIzODJcIiBdLCBbIFwiTW9udHNlcnJhdFwiLCBcIm1zXCIsIFwiMVwiLCAxNiwgWyBcIjY2NFwiIF0gXSwgWyBcIk1vcm9jY28gKOKAq9in2YTZhdi62LHYqOKArOKAjilcIiwgXCJtYVwiLCBcIjIxMlwiLCAwIF0sIFsgXCJNb3phbWJpcXVlIChNb8OnYW1iaXF1ZSlcIiwgXCJtelwiLCBcIjI1OFwiIF0sIFsgXCJNeWFubWFyIChCdXJtYSkgKOGAmeGAvOGAlOGAuuGAmeGArClcIiwgXCJtbVwiLCBcIjk1XCIgXSwgWyBcIk5hbWliaWEgKE5hbWliacOrKVwiLCBcIm5hXCIsIFwiMjY0XCIgXSwgWyBcIk5hdXJ1XCIsIFwibnJcIiwgXCI2NzRcIiBdLCBbIFwiTmVwYWwgKOCkqOClh+CkquCkvuCksilcIiwgXCJucFwiLCBcIjk3N1wiIF0sIFsgXCJOZXRoZXJsYW5kcyAoTmVkZXJsYW5kKVwiLCBcIm5sXCIsIFwiMzFcIiBdLCBbIFwiTmV3IENhbGVkb25pYSAoTm91dmVsbGUtQ2Fsw6lkb25pZSlcIiwgXCJuY1wiLCBcIjY4N1wiIF0sIFsgXCJOZXcgWmVhbGFuZFwiLCBcIm56XCIsIFwiNjRcIiBdLCBbIFwiTmljYXJhZ3VhXCIsIFwibmlcIiwgXCI1MDVcIiBdLCBbIFwiTmlnZXIgKE5pamFyKVwiLCBcIm5lXCIsIFwiMjI3XCIgXSwgWyBcIk5pZ2VyaWFcIiwgXCJuZ1wiLCBcIjIzNFwiIF0sIFsgXCJOaXVlXCIsIFwibnVcIiwgXCI2ODNcIiBdLCBbIFwiTm9yZm9sayBJc2xhbmRcIiwgXCJuZlwiLCBcIjY3MlwiIF0sIFsgXCJOb3J0aCBLb3JlYSAo7KGw7ISgIOuvvOyjvOyjvOydmCDsnbjrr7wg6rO17ZmU6rWtKVwiLCBcImtwXCIsIFwiODUwXCIgXSwgWyBcIk5vcnRoZXJuIE1hcmlhbmEgSXNsYW5kc1wiLCBcIm1wXCIsIFwiMVwiLCAxNywgWyBcIjY3MFwiIF0gXSwgWyBcIk5vcndheSAoTm9yZ2UpXCIsIFwibm9cIiwgXCI0N1wiLCAwIF0sIFsgXCJPbWFuICjigKvYudmP2YXYp9mG4oCs4oCOKVwiLCBcIm9tXCIsIFwiOTY4XCIgXSwgWyBcIlBha2lzdGFuICjigKvZvtin2qnYs9iq2KfZhuKArOKAjilcIiwgXCJwa1wiLCBcIjkyXCIgXSwgWyBcIlBhbGF1XCIsIFwicHdcIiwgXCI2ODBcIiBdLCBbIFwiUGFsZXN0aW5lICjigKvZgdmE2LPYt9mK2YbigKzigI4pXCIsIFwicHNcIiwgXCI5NzBcIiBdLCBbIFwiUGFuYW1hIChQYW5hbcOhKVwiLCBcInBhXCIsIFwiNTA3XCIgXSwgWyBcIlBhcHVhIE5ldyBHdWluZWFcIiwgXCJwZ1wiLCBcIjY3NVwiIF0sIFsgXCJQYXJhZ3VheVwiLCBcInB5XCIsIFwiNTk1XCIgXSwgWyBcIlBlcnUgKFBlcsO6KVwiLCBcInBlXCIsIFwiNTFcIiBdLCBbIFwiUGhpbGlwcGluZXNcIiwgXCJwaFwiLCBcIjYzXCIgXSwgWyBcIlBvbGFuZCAoUG9sc2thKVwiLCBcInBsXCIsIFwiNDhcIiBdLCBbIFwiUG9ydHVnYWxcIiwgXCJwdFwiLCBcIjM1MVwiIF0sIFsgXCJQdWVydG8gUmljb1wiLCBcInByXCIsIFwiMVwiLCAzLCBbIFwiNzg3XCIsIFwiOTM5XCIgXSBdLCBbIFwiUWF0YXIgKOKAq9mC2LfYseKArOKAjilcIiwgXCJxYVwiLCBcIjk3NFwiIF0sIFsgXCJSw6l1bmlvbiAoTGEgUsOpdW5pb24pXCIsIFwicmVcIiwgXCIyNjJcIiwgMCBdLCBbIFwiUm9tYW5pYSAoUm9tw6JuaWEpXCIsIFwicm9cIiwgXCI0MFwiIF0sIFsgXCJSdXNzaWEgKNCg0L7RgdGB0LjRjylcIiwgXCJydVwiLCBcIjdcIiwgMCBdLCBbIFwiUndhbmRhXCIsIFwicndcIiwgXCIyNTBcIiBdLCBbIFwiU2FpbnQgQmFydGjDqWxlbXlcIiwgXCJibFwiLCBcIjU5MFwiLCAxIF0sIFsgXCJTYWludCBIZWxlbmFcIiwgXCJzaFwiLCBcIjI5MFwiIF0sIFsgXCJTYWludCBLaXR0cyBhbmQgTmV2aXNcIiwgXCJrblwiLCBcIjFcIiwgMTgsIFsgXCI4NjlcIiBdIF0sIFsgXCJTYWludCBMdWNpYVwiLCBcImxjXCIsIFwiMVwiLCAxOSwgWyBcIjc1OFwiIF0gXSwgWyBcIlNhaW50IE1hcnRpbiAoU2FpbnQtTWFydGluIChwYXJ0aWUgZnJhbsOnYWlzZSkpXCIsIFwibWZcIiwgXCI1OTBcIiwgMiBdLCBbIFwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvbiAoU2FpbnQtUGllcnJlLWV0LU1pcXVlbG9uKVwiLCBcInBtXCIsIFwiNTA4XCIgXSwgWyBcIlNhaW50IFZpbmNlbnQgYW5kIHRoZSBHcmVuYWRpbmVzXCIsIFwidmNcIiwgXCIxXCIsIDIwLCBbIFwiNzg0XCIgXSBdLCBbIFwiU2Ftb2FcIiwgXCJ3c1wiLCBcIjY4NVwiIF0sIFsgXCJTYW4gTWFyaW5vXCIsIFwic21cIiwgXCIzNzhcIiBdLCBbIFwiU8OjbyBUb23DqSBhbmQgUHLDrW5jaXBlIChTw6NvIFRvbcOpIGUgUHLDrW5jaXBlKVwiLCBcInN0XCIsIFwiMjM5XCIgXSwgWyBcIlNhdWRpIEFyYWJpYSAo4oCr2KfZhNmF2YXZhNmD2Kkg2KfZhNi52LHYqNmK2Kkg2KfZhNiz2LnZiNiv2YrYqeKArOKAjilcIiwgXCJzYVwiLCBcIjk2NlwiIF0sIFsgXCJTZW5lZ2FsIChTw6luw6lnYWwpXCIsIFwic25cIiwgXCIyMjFcIiBdLCBbIFwiU2VyYmlhICjQodGA0LHQuNGY0LApXCIsIFwicnNcIiwgXCIzODFcIiBdLCBbIFwiU2V5Y2hlbGxlc1wiLCBcInNjXCIsIFwiMjQ4XCIgXSwgWyBcIlNpZXJyYSBMZW9uZVwiLCBcInNsXCIsIFwiMjMyXCIgXSwgWyBcIlNpbmdhcG9yZVwiLCBcInNnXCIsIFwiNjVcIiBdLCBbIFwiU2ludCBNYWFydGVuXCIsIFwic3hcIiwgXCIxXCIsIDIxLCBbIFwiNzIxXCIgXSBdLCBbIFwiU2xvdmFraWEgKFNsb3ZlbnNrbylcIiwgXCJza1wiLCBcIjQyMVwiIF0sIFsgXCJTbG92ZW5pYSAoU2xvdmVuaWphKVwiLCBcInNpXCIsIFwiMzg2XCIgXSwgWyBcIlNvbG9tb24gSXNsYW5kc1wiLCBcInNiXCIsIFwiNjc3XCIgXSwgWyBcIlNvbWFsaWEgKFNvb21hYWxpeWEpXCIsIFwic29cIiwgXCIyNTJcIiBdLCBbIFwiU291dGggQWZyaWNhXCIsIFwiemFcIiwgXCIyN1wiIF0sIFsgXCJTb3V0aCBLb3JlYSAo64yA7ZWc66+86rWtKVwiLCBcImtyXCIsIFwiODJcIiBdLCBbIFwiU291dGggU3VkYW4gKOKAq9is2YbZiNioINin2YTYs9mI2K/Yp9mG4oCs4oCOKVwiLCBcInNzXCIsIFwiMjExXCIgXSwgWyBcIlNwYWluIChFc3Bhw7FhKVwiLCBcImVzXCIsIFwiMzRcIiBdLCBbIFwiU3JpIExhbmthICjgt4Hgt4rigI3gtrvgt5Mg4La94LaC4Laa4LeP4LeAKVwiLCBcImxrXCIsIFwiOTRcIiBdLCBbIFwiU3VkYW4gKOKAq9in2YTYs9mI2K/Yp9mG4oCs4oCOKVwiLCBcInNkXCIsIFwiMjQ5XCIgXSwgWyBcIlN1cmluYW1lXCIsIFwic3JcIiwgXCI1OTdcIiBdLCBbIFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLCBcInNqXCIsIFwiNDdcIiwgMSwgWyBcIjc5XCIgXSBdLCBbIFwiU3dhemlsYW5kXCIsIFwic3pcIiwgXCIyNjhcIiBdLCBbIFwiU3dlZGVuIChTdmVyaWdlKVwiLCBcInNlXCIsIFwiNDZcIiBdLCBbIFwiU3dpdHplcmxhbmQgKFNjaHdlaXopXCIsIFwiY2hcIiwgXCI0MVwiIF0sIFsgXCJTeXJpYSAo4oCr2LPZiNix2YrYp+KArOKAjilcIiwgXCJzeVwiLCBcIjk2M1wiIF0sIFsgXCJUYWl3YW4gKOWPsOeBoylcIiwgXCJ0d1wiLCBcIjg4NlwiIF0sIFsgXCJUYWppa2lzdGFuXCIsIFwidGpcIiwgXCI5OTJcIiBdLCBbIFwiVGFuemFuaWFcIiwgXCJ0elwiLCBcIjI1NVwiIF0sIFsgXCJUaGFpbGFuZCAo4LmE4LiX4LiiKVwiLCBcInRoXCIsIFwiNjZcIiBdLCBbIFwiVGltb3ItTGVzdGVcIiwgXCJ0bFwiLCBcIjY3MFwiIF0sIFsgXCJUb2dvXCIsIFwidGdcIiwgXCIyMjhcIiBdLCBbIFwiVG9rZWxhdVwiLCBcInRrXCIsIFwiNjkwXCIgXSwgWyBcIlRvbmdhXCIsIFwidG9cIiwgXCI2NzZcIiBdLCBbIFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLCBcInR0XCIsIFwiMVwiLCAyMiwgWyBcIjg2OFwiIF0gXSwgWyBcIlR1bmlzaWEgKOKAq9iq2YjZhtiz4oCs4oCOKVwiLCBcInRuXCIsIFwiMjE2XCIgXSwgWyBcIlR1cmtleSAoVMO8cmtpeWUpXCIsIFwidHJcIiwgXCI5MFwiIF0sIFsgXCJUdXJrbWVuaXN0YW5cIiwgXCJ0bVwiLCBcIjk5M1wiIF0sIFsgXCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIiwgXCJ0Y1wiLCBcIjFcIiwgMjMsIFsgXCI2NDlcIiBdIF0sIFsgXCJUdXZhbHVcIiwgXCJ0dlwiLCBcIjY4OFwiIF0sIFsgXCJVLlMuIFZpcmdpbiBJc2xhbmRzXCIsIFwidmlcIiwgXCIxXCIsIDI0LCBbIFwiMzQwXCIgXSBdLCBbIFwiVWdhbmRhXCIsIFwidWdcIiwgXCIyNTZcIiBdLCBbIFwiVWtyYWluZSAo0KPQutGA0LDRl9C90LApXCIsIFwidWFcIiwgXCIzODBcIiBdLCBbIFwiVW5pdGVkIEFyYWIgRW1pcmF0ZXMgKOKAq9in2YTYpdmF2KfYsdin2Kog2KfZhNi52LHYqNmK2Kkg2KfZhNmF2KrYrdiv2KnigKzigI4pXCIsIFwiYWVcIiwgXCI5NzFcIiBdLCBbIFwiVW5pdGVkIEtpbmdkb21cIiwgXCJnYlwiLCBcIjQ0XCIsIDAgXSwgWyBcIlVuaXRlZCBTdGF0ZXNcIiwgXCJ1c1wiLCBcIjFcIiwgMCBdLCBbIFwiVXJ1Z3VheVwiLCBcInV5XCIsIFwiNTk4XCIgXSwgWyBcIlV6YmVraXN0YW4gKE/Ku3piZWtpc3RvbilcIiwgXCJ1elwiLCBcIjk5OFwiIF0sIFsgXCJWYW51YXR1XCIsIFwidnVcIiwgXCI2NzhcIiBdLCBbIFwiVmF0aWNhbiBDaXR5IChDaXR0w6AgZGVsIFZhdGljYW5vKVwiLCBcInZhXCIsIFwiMzlcIiwgMSwgWyBcIjA2Njk4XCIgXSBdLCBbIFwiVmVuZXp1ZWxhXCIsIFwidmVcIiwgXCI1OFwiIF0sIFsgXCJWaWV0bmFtIChWaeG7h3QgTmFtKVwiLCBcInZuXCIsIFwiODRcIiBdLCBbIFwiV2FsbGlzIGFuZCBGdXR1bmEgKFdhbGxpcy1ldC1GdXR1bmEpXCIsIFwid2ZcIiwgXCI2ODFcIiBdLCBbIFwiV2VzdGVybiBTYWhhcmEgKOKAq9in2YTYtdit2LHYp9ihINin2YTYutix2KjZitip4oCs4oCOKVwiLCBcImVoXCIsIFwiMjEyXCIsIDEsIFsgXCI1Mjg4XCIsIFwiNTI4OVwiIF0gXSwgWyBcIlllbWVuICjigKvYp9mE2YrZhdmG4oCs4oCOKVwiLCBcInllXCIsIFwiOTY3XCIgXSwgWyBcIlphbWJpYVwiLCBcInptXCIsIFwiMjYwXCIgXSwgWyBcIlppbWJhYndlXCIsIFwiendcIiwgXCIyNjNcIiBdLCBbIFwiw4VsYW5kIElzbGFuZHNcIiwgXCJheFwiLCBcIjM1OFwiLCAxLCBbIFwiMThcIiBdIF0gXTtcbiAgICAgICAgLy8gbG9vcCBvdmVyIGFsbCBvZiB0aGUgY291bnRyaWVzIGFib3ZlLCByZXN0cnVjdHVyaW5nIHRoZSBkYXRhIHRvIGJlIG9iamVjdHMgd2l0aCBuYW1lZCBrZXlzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsQ291bnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGFsbENvdW50cmllc1tpXTtcbiAgICAgICAgICAgIGFsbENvdW50cmllc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjWzBdLFxuICAgICAgICAgICAgICAgIGlzbzI6IGNbMV0sXG4gICAgICAgICAgICAgICAgZGlhbENvZGU6IGNbMl0sXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IGNbM10gfHwgMCxcbiAgICAgICAgICAgICAgICBhcmVhQ29kZXM6IGNbNF0gfHwgbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgICAgICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICAgICAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludGxUZWxJbnB1dEdsb2JhbHMgPSB7XG4gICAgICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gZ2V0SW5zdGFuY2UoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWludGwtdGVsLWlucHV0LWlkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW50bFRlbElucHV0R2xvYmFscy5pbnN0YW5jZXNbaWRdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluc3RhbmNlczoge31cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIHdpbmRvdy5pbnRsVGVsSW5wdXRHbG9iYWxzID0gaW50bFRlbElucHV0R2xvYmFscztcbiAgICAgICAgLy8gdGhlc2UgdmFycyBwZXJzaXN0IHRocm91Z2ggYWxsIGluc3RhbmNlcyBvZiB0aGUgcGx1Z2luXG4gICAgICAgIHZhciBpZCA9IDA7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHRvIGFsbG93IHRoZSBkcm9wZG93blxuICAgICAgICAgICAgYWxsb3dEcm9wZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGp1c3QgYSBkaWFsIGNvZGUgaW4gdGhlIGlucHV0OiByZW1vdmUgaXQgb24gYmx1clxuICAgICAgICAgICAgYXV0b0hpZGVEaWFsQ29kZTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGFkZCBhIHBsYWNlaG9sZGVyIGluIHRoZSBpbnB1dCB3aXRoIGFuIGV4YW1wbGUgbnVtYmVyIGZvciB0aGUgc2VsZWN0ZWQgY291bnRyeVxuICAgICAgICAgICAgYXV0b1BsYWNlaG9sZGVyOiBcInBvbGl0ZVwiLFxuICAgICAgICAgICAgLy8gbW9kaWZ5IHRoZSBwYXJlbnRDbGFzc1xuICAgICAgICAgICAgY3VzdG9tQ29udGFpbmVyOiBcIlwiLFxuICAgICAgICAgICAgLy8gbW9kaWZ5IHRoZSBhdXRvIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBjdXN0b21QbGFjZWhvbGRlcjogbnVsbCxcbiAgICAgICAgICAgIC8vIGFwcGVuZCBtZW51IHRvIHNwZWNpZmllZCBlbGVtZW50XG4gICAgICAgICAgICBkcm9wZG93bkNvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgICAgIC8vIGRvbid0IGRpc3BsYXkgdGhlc2UgY291bnRyaWVzXG4gICAgICAgICAgICBleGNsdWRlQ291bnRyaWVzOiBbXSxcbiAgICAgICAgICAgIC8vIGZvcm1hdCB0aGUgaW5wdXQgdmFsdWUgZHVyaW5nIGluaXRpYWxpc2F0aW9uIGFuZCBvbiBzZXROdW1iZXJcbiAgICAgICAgICAgIGZvcm1hdE9uRGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGdlb0lwIGxvb2t1cCBmdW5jdGlvblxuICAgICAgICAgICAgZ2VvSXBMb29rdXA6IG51bGwsXG4gICAgICAgICAgICAvLyBpbmplY3QgYSBoaWRkZW4gaW5wdXQgd2l0aCB0aGlzIG5hbWUsIGFuZCBvbiBzdWJtaXQsIHBvcHVsYXRlIGl0IHdpdGggdGhlIHJlc3VsdCBvZiBnZXROdW1iZXJcbiAgICAgICAgICAgIGhpZGRlbklucHV0OiBcIlwiLFxuICAgICAgICAgICAgLy8gaW5pdGlhbCBjb3VudHJ5XG4gICAgICAgICAgICBpbml0aWFsQ291bnRyeTogXCJcIixcbiAgICAgICAgICAgIC8vIGxvY2FsaXplZCBjb3VudHJ5IG5hbWVzIGUuZy4geyAnZGUnOiAnRGV1dHNjaGxhbmQnIH1cbiAgICAgICAgICAgIGxvY2FsaXplZENvdW50cmllczogbnVsbCxcbiAgICAgICAgICAgIC8vIGRvbid0IGluc2VydCBpbnRlcm5hdGlvbmFsIGRpYWwgY29kZXNcbiAgICAgICAgICAgIG5hdGlvbmFsTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIC8vIGRpc3BsYXkgb25seSB0aGVzZSBjb3VudHJpZXNcbiAgICAgICAgICAgIG9ubHlDb3VudHJpZXM6IFtdLFxuICAgICAgICAgICAgLy8gbnVtYmVyIHR5cGUgdG8gdXNlIGZvciBwbGFjZWhvbGRlcnNcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyTnVtYmVyVHlwZTogXCJNT0JJTEVcIixcbiAgICAgICAgICAgIC8vIHRoZSBjb3VudHJpZXMgYXQgdGhlIHRvcCBvZiB0aGUgbGlzdC4gZGVmYXVsdHMgdG8gdW5pdGVkIHN0YXRlcyBhbmQgdW5pdGVkIGtpbmdkb21cbiAgICAgICAgICAgIHByZWZlcnJlZENvdW50cmllczogWyBcInVzXCIsIFwiZ2JcIiBdLFxuICAgICAgICAgICAgLy8gZGlzcGxheSB0aGUgY291bnRyeSBkaWFsIGNvZGUgbmV4dCB0byB0aGUgc2VsZWN0ZWQgZmxhZyBzbyBpdCdzIG5vdCBwYXJ0IG9mIHRoZSB0eXBlZCBudW1iZXJcbiAgICAgICAgICAgIHNlcGFyYXRlRGlhbENvZGU6IGZhbHNlLFxuICAgICAgICAgICAgLy8gc3BlY2lmeSB0aGUgcGF0aCB0byB0aGUgbGlicGhvbmVudW1iZXIgc2NyaXB0IHRvIGVuYWJsZSB2YWxpZGF0aW9uL2Zvcm1hdHRpbmdcbiAgICAgICAgICAgIHV0aWxzU2NyaXB0OiBcIlwiXG4gICAgICAgIH07XG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfTm9ydGhfQW1lcmljYW5fTnVtYmVyaW5nX1BsYW5fYXJlYV9jb2RlcyNOb24tZ2VvZ3JhcGhpY19hcmVhX2NvZGVzXG4gICAgICAgIHZhciByZWdpb25sZXNzTmFucE51bWJlcnMgPSBbIFwiODAwXCIsIFwiODIyXCIsIFwiODMzXCIsIFwiODQ0XCIsIFwiODU1XCIsIFwiODY2XCIsIFwiODc3XCIsIFwiODgwXCIsIFwiODgxXCIsIFwiODgyXCIsIFwiODgzXCIsIFwiODg0XCIsIFwiODg1XCIsIFwiODg2XCIsIFwiODg3XCIsIFwiODg4XCIsIFwiODg5XCIgXTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgaWYgdGhlIHdpbmRvdy5sb2FkIGV2ZW50IGhhcyBmaXJlZCBhcyBpbXBvc3NpYmxlIHRvIGNoZWNrIGFmdGVyIHRoZSBmYWN0XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gVVBEQVRFOiB1c2UgYSBwdWJsaWMgc3RhdGljIGZpZWxkIHNvIHdlIGNhbiBmdWRnZSBpdCBpbiB0aGUgdGVzdHNcbiAgICAgICAgICAgICAgICB3aW5kb3cuaW50bFRlbElucHV0R2xvYmFscy53aW5kb3dMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXRpbGl0eSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYW4gb2JqZWN0LiBjYW4ndCB1c2UgT2JqZWN0LmVudHJpZXMgb3IgbmF0aXZlIGZvckVhY2ggYmVjYXVzZVxuICAgICAgICAvLyBvZiBJRTExXG4gICAgICAgIHZhciBmb3JFYWNoUHJvcCA9IGZ1bmN0aW9uIGZvckVhY2hQcm9wKG9iaiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGtleXNbaV0sIG9ialtrZXlzW2ldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIHJ1biBhIG1ldGhvZCBvbiBlYWNoIGluc3RhbmNlIG9mIHRoZSBwbHVnaW5cbiAgICAgICAgdmFyIGZvckVhY2hJbnN0YW5jZSA9IGZ1bmN0aW9uIGZvckVhY2hJbnN0YW5jZShtZXRob2QpIHtcbiAgICAgICAgICAgIGZvckVhY2hQcm9wKHdpbmRvdy5pbnRsVGVsSW5wdXRHbG9iYWxzLmluc3RhbmNlcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMuaW5zdGFuY2VzW2tleV1bbWV0aG9kXSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIHRoaXMgaXMgb3VyIHBsdWdpbiBjbGFzcyB0aGF0IHdlIHdpbGwgY3JlYXRlIGFuIGluc3RhbmNlIG9mXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICB2YXIgSXRpID0gLyojX19QVVJFX18qL1xuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEl0aShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEl0aSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IGlkKys7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dCA9IGlucHV0O1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlSXRlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRlZEl0ZW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIHByb2Nlc3Mgc3BlY2lmaWVkIG9wdGlvbnMgLyBkZWZhdWx0c1xuICAgICAgICAgICAgICAgIC8vIGFsdGVybmF0aXZlIHRvIE9iamVjdC5hc3NpZ24sIHdoaWNoIGlzbid0IHN1cHBvcnRlZCBieSBJRTExXG4gICAgICAgICAgICAgICAgdmFyIGN1c3RvbU9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIGZvckVhY2hQcm9wKGRlZmF1bHRzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9wdGlvbnNba2V5XSA9IGN1c3RvbU9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGN1c3RvbU9wdGlvbnNba2V5XSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFkSW5pdGlhbFBsYWNlaG9sZGVyID0gQm9vbGVhbihpbnB1dC5nZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoSXRpLCBbIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2luaXRcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBpbiBuYXRpb25hbE1vZGUsIGRpc2FibGUgb3B0aW9ucyByZWxhdGluZyB0byBkaWFsIGNvZGVzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubmF0aW9uYWxNb2RlKSB0aGlzLm9wdGlvbnMuYXV0b0hpZGVEaWFsQ29kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBzZXBhcmF0ZURpYWxDb2RlIHRoZW4gZG9lc24ndCBtYWtlIHNlbnNlIHRvIEEpIGluc2VydCBkaWFsIGNvZGUgaW50byBpbnB1dFxuICAgICAgICAgICAgICAgICAgICAvLyAoYXV0b0hpZGVEaWFsQ29kZSksIGFuZCBCKSBkaXNwbGF5IG5hdGlvbmFsIG51bWJlcnMgKGJlY2F1c2Ugd2UncmUgZGlzcGxheWluZyB0aGUgY291bnRyeVxuICAgICAgICAgICAgICAgICAgICAvLyBkaWFsIGNvZGUgbmV4dCB0byB0aGVtKVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlcGFyYXRlRGlhbENvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdXRvSGlkZURpYWxDb2RlID0gdGhpcy5vcHRpb25zLm5hdGlvbmFsTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGNhbm5vdCBqdXN0IHRlc3Qgc2NyZWVuIHNpemUgYXMgc29tZSBzbWFydHBob25lcy93ZWJzaXRlIG1ldGEgdGFncyB3aWxsIHJlcG9ydCBkZXNrdG9wXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdXRpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IGZvciBzb21lIHJlYXNvbiBqYXNtaW5lIGJyZWFrcyBpZiB5b3UgcHV0IHRoaXMgaW4gdGhlIG1haW4gUGx1Z2luIGZ1bmN0aW9uIHdpdGggdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3Qgb2YgdGhlc2UgZGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IHRvIHRhcmdldCBBbmRyb2lkIE1vYmlsZXMgKGFuZCBub3QgVGFibGV0cyksIHdlIG11c3QgZmluZCAnQW5kcm9pZCcgYW5kICdNb2JpbGUnXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNNb2JpbGUgPSAvQW5kcm9pZC4rTW9iaWxlfHdlYk9TfGlQaG9uZXxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHRoZSBtb2JpbGUgZHJvcGRvd24gY3NzXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJpdGktbW9iaWxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gbW9iaWxlLCB3ZSB3YW50IGEgZnVsbCBzY3JlZW4gZHJvcGRvd24sIHNvIHdlIG11c3QgYXBwZW5kIGl0IHRvIHRoZSBib2R5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kcm9wZG93bkNvbnRhaW5lcikgdGhpcy5vcHRpb25zLmRyb3Bkb3duQ29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGVzZSBwcm9taXNlcyBnZXQgcmVzb2x2ZWQgd2hlbiB0aGVpciBpbmRpdmlkdWFsIHJlcXVlc3RzIGNvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2F5IHRoZSBkZXYgY2FuIGRvIHNvbWV0aGluZyBsaWtlIGl0aS5wcm9taXNlLnRoZW4oLi4uKSB0byBrbm93IHdoZW4gYWxsIHJlcXVlc3RzIGFyZVxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdXRvQ291bnRyeVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVzb2x2ZUF1dG9Db3VudHJ5UHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlamVjdEF1dG9Db3VudHJ5UHJvbWlzZSA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0aWxzU2NyaXB0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5yZXNvbHZlVXRpbHNTY3JpcHRQcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVqZWN0VXRpbHNTY3JpcHRQcm9taXNlID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb21pc2UgPSBQcm9taXNlLmFsbChbIGF1dG9Db3VudHJ5UHJvbWlzZSwgdXRpbHNTY3JpcHRQcm9taXNlIF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCBlcnJvcnMgd2hlbiBQcm9taXNlIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZUF1dG9Db3VudHJ5UHJvbWlzZSA9IHRoaXMucmVqZWN0QXV0b0NvdW50cnlQcm9taXNlID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVV0aWxzU2NyaXB0UHJvbWlzZSA9IHRoaXMucmVqZWN0VXRpbHNTY3JpcHRQcm9taXNlID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpbiB2YXJpb3VzIHNpdHVhdGlvbnMgdGhlcmUgY291bGQgYmUgbm8gY291bnRyeSBzZWxlY3RlZCBpbml0aWFsbHksIGJ1dCB3ZSBuZWVkIHRvIGJlIGFibGVcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gYXNzdW1lIHRoaXMgdmFyaWFibGUgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm9jZXNzIGFsbCB0aGUgZGF0YTogb25seUNvdW50cmllcywgZXhjbHVkZUNvdW50cmllcywgcHJlZmVycmVkQ291bnRyaWVzIGV0Y1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzQ291bnRyeURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIG1hcmt1cFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZU1hcmt1cCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIGlucHV0IHZhbHVlIGFuZCB0aGUgc2VsZWN0ZWQgZmxhZ1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnQgYWxsIG9mIHRoZSBldmVudCBsaXN0ZW5lcnM6IGF1dG9IaWRlRGlhbENvZGUsIGlucHV0IGtleWRvd24sIHNlbGVjdGVkRmxhZyBjbGlja1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHV0aWxzIHNjcmlwdCwgYW5kIGF1dG8gY291bnRyeVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0UmVxdWVzdHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9wcm9jZXNzQ291bnRyeURhdGFcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Byb2Nlc3NDb3VudHJ5RGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyBvbmx5Q291bnRyaWVzIG9yIGV4Y2x1ZGVDb3VudHJpZXMgYXJyYXkgaWYgcHJlc2VudFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzQWxsQ291bnRyaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByb2Nlc3MgdGhlIGNvdW50cnlDb2RlcyBtYXBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0NvdW50cnlDb2RlcygpO1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm9jZXNzIHRoZSBwcmVmZXJyZWRDb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1ByZWZlcnJlZENvdW50cmllcygpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmFuc2xhdGUgY291bnRyaWVzIGFjY29yZGluZyB0byBsb2NhbGl6ZWRDb3VudHJpZXMgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9jYWxpemVkQ291bnRyaWVzKSB0aGlzLl90cmFuc2xhdGVDb3VudHJpZXNCeUxvY2FsZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzb3J0IGNvdW50cmllcyBieSBuYW1lXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub25seUNvdW50cmllcy5sZW5ndGggfHwgdGhpcy5vcHRpb25zLmxvY2FsaXplZENvdW50cmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJpZXMuc29ydCh0aGlzLl9jb3VudHJ5TmFtZVNvcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfYWRkQ291bnRyeUNvZGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkZENvdW50cnlDb2RlKGlzbzIsIGNvdW50cnlDb2RlLCBwcmlvcml0eSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRyeUNvZGUubGVuZ3RoID4gdGhpcy5jb3VudHJ5Q29kZU1heExlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJ5Q29kZU1heExlbiA9IGNvdW50cnlDb2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY291bnRyeUNvZGVzLmhhc093blByb3BlcnR5KGNvdW50cnlDb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJ5Q29kZXNbY291bnRyeUNvZGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gYmFpbCBpZiB3ZSBhbHJlYWR5IGhhdmUgdGhpcyBjb3VudHJ5IGZvciB0aGlzIGNvdW50cnlDb2RlXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb3VudHJ5Q29kZXNbY291bnRyeUNvZGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb3VudHJ5Q29kZXNbY291bnRyeUNvZGVdW2ldID09PSBpc28yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHVuZGVmaW5lZCBhcyAwIGlzIGZhbHN5XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHByaW9yaXR5ICE9PSB1bmRlZmluZWQgPyBwcmlvcml0eSA6IHRoaXMuY291bnRyeUNvZGVzW2NvdW50cnlDb2RlXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRyeUNvZGVzW2NvdW50cnlDb2RlXVtpbmRleF0gPSBpc28yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3Byb2Nlc3NBbGxDb3VudHJpZXNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Byb2Nlc3NBbGxDb3VudHJpZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub25seUNvdW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb3dlckNhc2VPbmx5Q291bnRyaWVzID0gdGhpcy5vcHRpb25zLm9ubHlDb3VudHJpZXMubWFwKGZ1bmN0aW9uKGNvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY291bnRyeS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cmllcyA9IGFsbENvdW50cmllcy5maWx0ZXIoZnVuY3Rpb24oY291bnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb3dlckNhc2VPbmx5Q291bnRyaWVzLmluZGV4T2YoY291bnRyeS5pc28yKSA+IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmV4Y2x1ZGVDb3VudHJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG93ZXJDYXNlRXhjbHVkZUNvdW50cmllcyA9IHRoaXMub3B0aW9ucy5leGNsdWRlQ291bnRyaWVzLm1hcChmdW5jdGlvbihjb3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50cnkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJpZXMgPSBhbGxDb3VudHJpZXMuZmlsdGVyKGZ1bmN0aW9uKGNvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG93ZXJDYXNlRXhjbHVkZUNvdW50cmllcy5pbmRleE9mKGNvdW50cnkuaXNvMikgPT09IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cmllcyA9IGFsbENvdW50cmllcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3RyYW5zbGF0ZUNvdW50cmllc0J5TG9jYWxlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90cmFuc2xhdGVDb3VudHJpZXNCeUxvY2FsZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvdW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzbyA9IHRoaXMuY291bnRyaWVzW2ldLmlzbzIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9jYWxpemVkQ291bnRyaWVzLmhhc093blByb3BlcnR5KGlzbykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cmllc1tpXS5uYW1lID0gdGhpcy5vcHRpb25zLmxvY2FsaXplZENvdW50cmllc1tpc29dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfY291bnRyeU5hbWVTb3J0XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jb3VudHJ5TmFtZVNvcnQoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9wcm9jZXNzQ291bnRyeUNvZGVzXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzQ291bnRyeUNvZGVzKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cnlDb2RlTWF4TGVuID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSB3ZSBzdG9yZSBqdXN0IGRpYWwgY29kZXNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsQ29kZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSB3ZSBzdG9yZSBcImNvdW50cnkgY29kZXNcIiAoYm90aCBkaWFsIGNvZGVzIGFuZCB0aGVpciBhcmVhIGNvZGVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cnlDb2RlcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdDogYWRkIGRpYWwgY29kZXNcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvdW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmNvdW50cmllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kaWFsQ29kZXNbYy5kaWFsQ29kZV0pIHRoaXMuZGlhbENvZGVzW2MuZGlhbENvZGVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZENvdW50cnlDb2RlKGMuaXNvMiwgYy5kaWFsQ29kZSwgYy5wcmlvcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dDogYWRkIGFyZWEgY29kZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIHNlY29uZCBsb29wIG92ZXIgY291bnRyaWVzLCB0byBtYWtlIHN1cmUgd2UgaGF2ZSBhbGwgb2YgdGhlIFwicm9vdFwiIGNvdW50cmllc1xuICAgICAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGluIHRoZSBtYXAsIHNvIHRoYXQgd2UgY2FuIGFjY2VzcyB0aGVtLCBhcyBlYWNoIHRpbWUgd2UgYWRkIGFuIGFyZWEgY29kZSBzdWJzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gdGhlIG1hcCwgd2UgYWxzbyBuZWVkIHRvIGluY2x1ZGUgdGhlIFwicm9vdFwiIGNvdW50cnkncyBjb2RlLCBhcyB0aGF0IGFsc28gbWF0Y2hlc1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5jb3VudHJpZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2MgPSB0aGlzLmNvdW50cmllc1tfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmVhIGNvZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MuYXJlYUNvZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvb3RDb3VudHJ5Q29kZSA9IHRoaXMuY291bnRyeUNvZGVzW19jLmRpYWxDb2RlXVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBhcmVhIGNvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9jLmFyZWFDb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJlYUNvZGUgPSBfYy5hcmVhQ29kZXNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIGRpZ2l0IGluIHRoZSBhcmVhIGNvZGUgdG8gYWRkIGFsbCBwYXJ0aWFsIG1hdGNoZXMgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMTsgayA8IGFyZWFDb2RlLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbERpYWxDb2RlID0gX2MuZGlhbENvZGUgKyBhcmVhQ29kZS5zdWJzdHIoMCwgayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCB3aXRoIHRoZSByb290IGNvdW50cnksIGFzIHRoYXQgYWxzbyBtYXRjaGVzIHRoaXMgZGlhbCBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRDb3VudHJ5Q29kZShyb290Q291bnRyeUNvZGUsIHBhcnRpYWxEaWFsQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRDb3VudHJ5Q29kZShfYy5pc28yLCBwYXJ0aWFsRGlhbENvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgZnVsbCBhcmVhIGNvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkQ291bnRyeUNvZGUoX2MuaXNvMiwgX2MuZGlhbENvZGUgKyBhcmVhQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfcHJvY2Vzc1ByZWZlcnJlZENvdW50cmllc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvY2Vzc1ByZWZlcnJlZENvdW50cmllcygpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVmZXJyZWRDb3VudHJpZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMucHJlZmVycmVkQ291bnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyeUNvZGUgPSB0aGlzLm9wdGlvbnMucHJlZmVycmVkQ291bnRyaWVzW2ldLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyeURhdGEgPSB0aGlzLl9nZXRDb3VudHJ5RGF0YShjb3VudHJ5Q29kZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50cnlEYXRhKSB0aGlzLnByZWZlcnJlZENvdW50cmllcy5wdXNoKGNvdW50cnlEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2NyZWF0ZUVsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVFbChuYW1lLCBhdHRycywgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRycykgZm9yRWFjaFByb3AoYXR0cnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyKSBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfZ2VuZXJhdGVNYXJrdXBcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dlbmVyYXRlTWFya3VwKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBhdXRvY29tcGxldGUgZG9lcyBub3QgZXhpc3Qgb24gdGhlIGVsZW1lbnQgYW5kIGl0cyBmb3JtLCB0aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgYXV0b2NvbXBsZXRlIGFzIHRoZXJlJ3Mgbm8gc2FmZSwgY3Jvc3MtYnJvd3NlciBldmVudCB3ZSBjYW4gcmVhY3QgdG8sIHNvIGl0IGNhblxuICAgICAgICAgICAgICAgICAgICAvLyBlYXNpbHkgcHV0IHRoZSBwbHVnaW4gaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlIGUuZy4gdGhlIHdyb25nIGZsYWcgc2VsZWN0ZWQgZm9yIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBhdXRvY29tcGxldGVkIG51bWJlciwgd2hpY2ggb24gc3VibWl0IGNvdWxkIG1lYW4gd3JvbmcgbnVtYmVyIGlzIHNhdmVkIChlc3AgaW4gbmF0aW9uYWxNb2RlKVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGVsSW5wdXQuaGFzQXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlXCIpICYmICEodGhpcy50ZWxJbnB1dC5mb3JtICYmIHRoaXMudGVsSW5wdXQuZm9ybS5oYXNBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVcIikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbElucHV0LnNldEF0dHJpYnV0ZShcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzIChtb3N0bHkgZm9yIHBvc2l0aW9uaW5nKVxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Q2xhc3MgPSBcIml0aVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFsbG93RHJvcGRvd24pIHBhcmVudENsYXNzICs9IFwiIGl0aS0tYWxsb3ctZHJvcGRvd25cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zZXBhcmF0ZURpYWxDb2RlKSBwYXJlbnRDbGFzcyArPSBcIiBpdGktLXNlcGFyYXRlLWRpYWwtY29kZVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmN1c3RvbUNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q2xhc3MgKz0gXCIgXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDbGFzcyArPSB0aGlzLm9wdGlvbnMuY3VzdG9tQ29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gdGhpcy5fY3JlYXRlRWwoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBwYXJlbnRDbGFzc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCB0aGlzLnRlbElucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGFnc0NvbnRhaW5lciA9IHRoaXMuX2NyZWF0ZUVsKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJpdGlfX2ZsYWctY29udGFpbmVyXCJcbiAgICAgICAgICAgICAgICAgICAgfSwgd3JhcHBlcik7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy50ZWxJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGVjdGVkIGZsYWcgKGRpc3BsYXllZCB0byBsZWZ0IG9mIGlucHV0KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmxhZyA9IHRoaXMuX2NyZWF0ZUVsKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJpdGlfX3NlbGVjdGVkLWZsYWdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwiY29tYm9ib3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJpYS1vd25zXCI6IFwiaXRpLVwiLmNvbmNhdCh0aGlzLmlkLCBcIl9fY291bnRyeS1saXN0Ym94XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIlxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLmZsYWdzQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZsYWdJbm5lciA9IHRoaXMuX2NyZWF0ZUVsKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJpdGlfX2ZsYWdcIlxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnNlbGVjdGVkRmxhZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VwYXJhdGVEaWFsQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERpYWxDb2RlID0gdGhpcy5fY3JlYXRlRWwoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJpdGlfX3NlbGVjdGVkLWRpYWwtY29kZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnNlbGVjdGVkRmxhZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd0Ryb3Bkb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGVsZW1lbnQgZm9jdXNhYmxlIGFuZCB0YWIgbmF2aWdhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmxhZy5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duQXJyb3cgPSB0aGlzLl9jcmVhdGVFbChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcIml0aV9fYXJyb3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5zZWxlY3RlZEZsYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY291bnRyeSBkcm9wZG93bjogcHJlZmVycmVkIGNvdW50cmllcywgdGhlbiBkaXZpZGVyLCB0aGVuIGFsbCBjb3VudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRyeUxpc3QgPSB0aGlzLl9jcmVhdGVFbChcInVsXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwiaXRpX19jb3VudHJ5LWxpc3QgaXRpX19oaWRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwiaXRpLVwiLmNvbmNhdCh0aGlzLmlkLCBcIl9fY291bnRyeS1saXN0Ym94XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwibGlzdGJveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZWZlcnJlZENvdW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmRMaXN0SXRlbXModGhpcy5wcmVmZXJyZWRDb3VudHJpZXMsIFwiaXRpX19wcmVmZXJyZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRWwoXCJsaVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJpdGlfX2RpdmlkZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogXCJzZXBhcmF0b3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IFwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5jb3VudHJ5TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmRMaXN0SXRlbXModGhpcy5jb3VudHJpZXMsIFwiaXRpX19zdGFuZGFyZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBkcm9wZG93bkNvbnRhaW5lciBtYXJrdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZHJvcGRvd25Db250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duID0gdGhpcy5fY3JlYXRlRWwoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwiaXRpIGl0aS0tY29udGFpbmVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmFwcGVuZENoaWxkKHRoaXMuY291bnRyeUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsYWdzQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY291bnRyeUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGlkZGVuSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoaWRkZW5JbnB1dE5hbWUgPSB0aGlzLm9wdGlvbnMuaGlkZGVuSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMudGVsSW5wdXQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuYW1lLmxhc3RJbmRleE9mKFwiW1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBpbnB1dCBuYW1lIGNvbnRhaW5zIHNxdWFyZSBicmFja2V0cywgdGhlbiBnaXZlIHRoZSBoaWRkZW4gaW5wdXQgdGhlIHNhbWUgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBsYXN0IHNldCBvZiBicmFja2V0cyB3aXRoIHRoZSBnaXZlbiBoaWRkZW5JbnB1dCBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IC0xKSBoaWRkZW5JbnB1dE5hbWUgPSBcIlwiLmNvbmNhdChuYW1lLnN1YnN0cigwLCBpKSwgXCJbXCIpLmNvbmNhdChoaWRkZW5JbnB1dE5hbWUsIFwiXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQgPSB0aGlzLl9jcmVhdGVFbChcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImhpZGRlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGhpZGRlbklucHV0TmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuaGlkZGVuSW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfYXBwZW5kTGlzdEl0ZW1zXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRMaXN0SXRlbXMoY291bnRyaWVzLCBjbGFzc05hbWUsIHByZWZlcnJlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjcmVhdGUgc28gbWFueSBET00gZWxlbWVudHMsIGl0IGlzIGZhc3RlciB0byBidWlsZCBhIHRlbXAgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGVuIGFkZCBldmVyeXRoaW5nIHRvIHRoZSBET00gaW4gb25lIGdvIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIGNvdW50cnlcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gY291bnRyaWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkU3VmZml4ID0gcHJlZmVycmVkID8gXCItcHJlZmVycmVkXCIgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3BlbiB0aGUgbGlzdCBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgKz0gXCI8bGkgY2xhc3M9J2l0aV9fY291bnRyeSBcIi5jb25jYXQoY2xhc3NOYW1lLCBcIicgdGFiSW5kZXg9Jy0xJyBpZD0naXRpLVwiKS5jb25jYXQodGhpcy5pZCwgXCJfX2l0ZW0tXCIpLmNvbmNhdChjLmlzbzIpLmNvbmNhdChpZFN1ZmZpeCwgXCInIHJvbGU9J29wdGlvbicgZGF0YS1kaWFsLWNvZGU9J1wiKS5jb25jYXQoYy5kaWFsQ29kZSwgXCInIGRhdGEtY291bnRyeS1jb2RlPSdcIikuY29uY2F0KGMuaXNvMiwgXCInPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgZmxhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wICs9IFwiPGRpdiBjbGFzcz0naXRpX19mbGFnLWJveCc+PGRpdiBjbGFzcz0naXRpX19mbGFnIGl0aV9fXCIuY29uY2F0KGMuaXNvMiwgXCInPjwvZGl2PjwvZGl2PlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgY291bnRyeSBuYW1lIGFuZCBkaWFsIGNvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCArPSBcIjxzcGFuIGNsYXNzPSdpdGlfX2NvdW50cnktbmFtZSc+XCIuY29uY2F0KGMubmFtZSwgXCI8L3NwYW4+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wICs9IFwiPHNwYW4gY2xhc3M9J2l0aV9fZGlhbC1jb2RlJz4rXCIuY29uY2F0KGMuZGlhbENvZGUsIFwiPC9zcGFuPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsb3NlIHRoZSBsaXN0IGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCArPSBcIjwvbGk+XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJ5TGlzdC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgdG1wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9zZXRJbml0aWFsU3RhdGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEluaXRpYWxTdGF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMudGVsSW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWFsQ29kZSA9IHRoaXMuX2dldERpYWxDb2RlKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1JlZ2lvbmxlc3NOYW5wID0gdGhpcy5faXNSZWdpb25sZXNzTmFucCh2YWwpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucywgaW5pdGlhbENvdW50cnkgPSBfdGhpcyRvcHRpb25zLmluaXRpYWxDb3VudHJ5LCBuYXRpb25hbE1vZGUgPSBfdGhpcyRvcHRpb25zLm5hdGlvbmFsTW9kZSwgYXV0b0hpZGVEaWFsQ29kZSA9IF90aGlzJG9wdGlvbnMuYXV0b0hpZGVEaWFsQ29kZSwgc2VwYXJhdGVEaWFsQ29kZSA9IF90aGlzJG9wdGlvbnMuc2VwYXJhdGVEaWFsQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIGEgZGlhbCBjb2RlLCBhbmQgaXQncyBub3QgYSByZWdpb25sZXNzTmFucCwgd2UgY2FuIGdvIGFoZWFkIGFuZCBzZXQgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGZsYWcsIGVsc2UgZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGNvdW50cnlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpYWxDb2RlICYmICFpc1JlZ2lvbmxlc3NOYW5wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVGbGFnRnJvbU51bWJlcih2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluaXRpYWxDb3VudHJ5ICE9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGlmIHdlIHNob3VsZCBzZWxlY3QgYSBmbGFnXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbENvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRGbGFnKGluaXRpYWxDb3VudHJ5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlhbENvZGUgJiYgaXNSZWdpb25sZXNzTmFucCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYXMgaW50bCBkaWFsIGNvZGUsIGlzIHJlZ2lvbmxlc3MgbmFucCwgYW5kIG5vIGluaXRpYWxDb3VudHJ5LCBzbyBkZWZhdWx0IHRvIFVTXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEZsYWcoXCJ1c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBkaWFsIGNvZGUgYW5kIG5vIGluaXRpYWxDb3VudHJ5LCBzbyBkZWZhdWx0IHRvIGZpcnN0IGluIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0Q291bnRyeSA9IHRoaXMucHJlZmVycmVkQ291bnRyaWVzLmxlbmd0aCA/IHRoaXMucHJlZmVycmVkQ291bnRyaWVzWzBdLmlzbzIgOiB0aGlzLmNvdW50cmllc1swXS5pc28yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RmxhZyh0aGlzLmRlZmF1bHRDb3VudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGVtcHR5IGFuZCBubyBuYXRpb25hbE1vZGUgYW5kIG5vIGF1dG9IaWRlRGlhbENvZGUgdGhlbiBpbnNlcnQgdGhlIGRlZmF1bHQgZGlhbCBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbCAmJiAhbmF0aW9uYWxNb2RlICYmICFhdXRvSGlkZURpYWxDb2RlICYmICFzZXBhcmF0ZURpYWxDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC52YWx1ZSA9IFwiK1wiLmNvbmNhdCh0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuZGlhbENvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IGlmIGluaXRpYWxDb3VudHJ5IGlzIHNldCB0byBhdXRvLCB0aGF0IHdpbGwgYmUgaGFuZGxlZCBzZXBhcmF0ZWx5XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvcm1hdCAtIG5vdGUgdGhpcyB3b250IGJlIHJ1biBhZnRlciBfdXBkYXRlRGlhbENvZGUgYXMgdGhhdCdzIG9ubHkgY2FsbGVkIGlmIG5vIHZhbFxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsKSB0aGlzLl91cGRhdGVWYWxGcm9tTnVtYmVyKHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfaW5pdExpc3RlbmVyc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdExpc3RlbmVycygpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdEtleUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9IaWRlRGlhbENvZGUpIHRoaXMuX2luaXRCbHVyTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dEcm9wZG93bikgdGhpcy5faW5pdERyb3Bkb3duTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbklucHV0KSB0aGlzLl9pbml0SGlkZGVuSW5wdXRMaXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2luaXRIaWRkZW5JbnB1dExpc3RlbmVyXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0SGlkZGVuSW5wdXRMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUhpZGRlbklucHV0U3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuaGlkZGVuSW5wdXQudmFsdWUgPSBfdGhpczMuZ2V0TnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlbElucHV0LmZvcm0pIHRoaXMudGVsSW5wdXQuZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZUhpZGRlbklucHV0U3VibWl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9nZXRDbG9zZXN0TGFiZWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENsb3Nlc3RMYWJlbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gdGhpcy50ZWxJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGVsICYmIGVsLnRhZ05hbWUgIT09IFwiTEFCRUxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9pbml0RHJvcGRvd25MaXN0ZW5lcnNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXREcm9wZG93bkxpc3RlbmVycygpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhY2sgZm9yIGlucHV0IG5lc3RlZCBpbnNpZGUgbGFiZWwgKHdoaWNoIGlzIHZhbGlkIG1hcmt1cCk6IGNsaWNraW5nIHRoZSBzZWxlY3RlZC1mbGFnIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIG9wZW4gdGhlIGRyb3Bkb3duIHdvdWxkIHRoZW4gYXV0b21hdGljYWxseSB0cmlnZ2VyIGEgMm5kIGNsaWNrIG9uIHRoZSBpbnB1dCB3aGljaCB3b3VsZFxuICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSBpdCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVMYWJlbENsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgdGhlbiBmb2N1cyB0aGUgaW5wdXQsIGVsc2UgaWdub3JlIHRoZSBjbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzNC5jb3VudHJ5TGlzdC5jbGFzc0xpc3QuY29udGFpbnMoXCJpdGlfX2hpZGVcIikpIF90aGlzNC50ZWxJbnB1dC5mb2N1cygpOyBlbHNlIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gdGhpcy5fZ2V0Q2xvc2VzdExhYmVsKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbCkgbGFiZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2hhbmRsZUxhYmVsQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2dnbGUgY291bnRyeSBkcm9wZG93biBvbiBjbGlja1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVDbGlja1NlbGVjdGVkRmxhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBpbnRlcmNlcHQgdGhpcyBldmVudCBpZiB3ZSdyZSBvcGVuaW5nIHRoZSBkcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBsZXQgaXQgYnViYmxlIHVwIHRvIHRoZSB0b3AgKFwiY2xpY2stb2ZmLXRvLWNsb3NlXCIgbGlzdGVuZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW5ub3QganVzdCBzdG9wUHJvcGFnYXRpb24gYXMgaXQgbWF5IGJlIG5lZWRlZCB0byBjbG9zZSBhbm90aGVyIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM0LmNvdW50cnlMaXN0LmNsYXNzTGlzdC5jb250YWlucyhcIml0aV9faGlkZVwiKSAmJiAhX3RoaXM0LnRlbElucHV0LmRpc2FibGVkICYmICFfdGhpczQudGVsSW5wdXQucmVhZE9ubHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuX3Nob3dEcm9wZG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmxhZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlQ2xpY2tTZWxlY3RlZEZsYWcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBvcGVuIGRyb3Bkb3duIGxpc3QgaWYgY3VycmVudGx5IGZvY3VzZWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlRmxhZ3NDb250YWluZXJLZXlkb3duID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzRHJvcGRvd25IaWRkZW4gPSBfdGhpczQuY291bnRyeUxpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXRpX19oaWRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRHJvcGRvd25IaWRkZW4gJiYgWyBcIkFycm93VXBcIiwgXCJVcFwiLCBcIkFycm93RG93blwiLCBcIkRvd25cIiwgXCIgXCIsIFwiRW50ZXJcIiBdLmluZGV4T2YoZS5rZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgZm9ybSBmcm9tIGJlaW5nIHN1Ym1pdHRlZCBpZiBcIkVOVEVSXCIgd2FzIHByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCBldmVudCBmcm9tIGJlaW5nIGhhbmRsZWQgYWdhaW4gYnkgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5fc2hvd0Ryb3Bkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGxvdyBuYXZpZ2F0aW9uIGZyb20gZHJvcGRvd24gdG8gaW5wdXQgb24gVEFCXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiVGFiXCIpIF90aGlzNC5fY2xvc2VEcm9wZG93bigpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsYWdzQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUZsYWdzQ29udGFpbmVyS2V5ZG93bik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfaW5pdFJlcXVlc3RzXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0UmVxdWVzdHMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdXNlciBoYXMgc3BlY2lmaWVkIHRoZSBwYXRoIHRvIHRoZSB1dGlscyBzY3JpcHQsIGZldGNoIGl0IG9uIHdpbmRvdy5sb2FkLCBlbHNlIHJlc29sdmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51dGlsc1NjcmlwdCAmJiAhd2luZG93LmludGxUZWxJbnB1dFV0aWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGx1Z2luIGlzIGJlaW5nIGluaXRpYWxpc2VkIGFmdGVyIHRoZSB3aW5kb3cubG9hZCBldmVudCBoYXMgYWxyZWFkeSBiZWVuIGZpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMud2luZG93TG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMubG9hZFV0aWxzKHRoaXMub3B0aW9ucy51dGlsc1NjcmlwdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdhaXQgdW50aWwgdGhlIGxvYWQgZXZlbnQgc28gd2UgZG9uJ3QgYmxvY2sgYW55IG90aGVyIHJlcXVlc3RzIGUuZy4gdGhlIGZsYWdzIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW50bFRlbElucHV0R2xvYmFscy5sb2FkVXRpbHMoX3RoaXM1Lm9wdGlvbnMudXRpbHNTY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5yZXNvbHZlVXRpbHNTY3JpcHRQcm9taXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5pdGlhbENvdW50cnkgPT09IFwiYXV0b1wiKSB0aGlzLl9sb2FkQXV0b0NvdW50cnkoKTsgZWxzZSB0aGlzLnJlc29sdmVBdXRvQ291bnRyeVByb21pc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9sb2FkQXV0b0NvdW50cnlcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRBdXRvQ291bnRyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMyBvcHRpb25zOlxuICAgICAgICAgICAgICAgICAgICAvLyAxKSBhbHJlYWR5IGxvYWRlZCAod2UncmUgZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gMikgbm90IGFscmVhZHkgc3RhcnRlZCBsb2FkaW5nIChzdGFydClcbiAgICAgICAgICAgICAgICAgICAgLy8gMykgYWxyZWFkeSBzdGFydGVkIGxvYWRpbmcgKGRvIG5vdGhpbmcgLSBqdXN0IHdhaXQgZm9yIGxvYWRpbmcgY2FsbGJhY2sgdG8gZmlyZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbnRsVGVsSW5wdXRHbG9iYWxzLmF1dG9Db3VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUF1dG9Db3VudHJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXdpbmRvdy5pbnRsVGVsSW5wdXRHbG9iYWxzLnN0YXJ0ZWRMb2FkaW5nQXV0b0NvdW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGRvIHRoaXMgdHdpY2UhXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW50bFRlbElucHV0R2xvYmFscy5zdGFydGVkTG9hZGluZ0F1dG9Db3VudHJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmdlb0lwTG9va3VwID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZ2VvSXBMb29rdXAoZnVuY3Rpb24oY291bnRyeUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMuYXV0b0NvdW50cnkgPSBjb3VudHJ5Q29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZWxsIGFsbCBpbnN0YW5jZXMgdGhlIGF1dG8gY291bnRyeSBpcyByZWFkeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCBqdXN0IGJlIHRoZSBjdXJyZW50IGluc3RhbmNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVUERBVEU6IHVzZSBzZXRUaW1lb3V0IGluIGNhc2UgdGhlaXIgZ2VvSXBMb29rdXAgZnVuY3Rpb24gY2FsbHMgdGhpcyBjYWxsYmFjayBzdHJhaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhd2F5IChlLmcuIGlmIHRoZXkgaGF2ZSBhbHJlYWR5IGRvbmUgdGhlIGdlbyBpcCBsb29rdXAgc29tZXdoZXJlIGVsc2UpLiBVc2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXRUaW1lb3V0IG1lYW5zIHRoYXQgdGhlIGN1cnJlbnQgdGhyZWFkIG9mIGV4ZWN1dGlvbiB3aWxsIGZpbmlzaCBiZWZvcmUgZXhlY3V0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMsIHdoaWNoIGFsbG93cyB0aGUgcGx1Z2luIHRvIGZpbmlzaCBpbml0aWFsaXNpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9yRWFjaEluc3RhbmNlKFwiaGFuZGxlQXV0b0NvdW50cnlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9yRWFjaEluc3RhbmNlKFwicmVqZWN0QXV0b0NvdW50cnlQcm9taXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfaW5pdEtleUxpc3RlbmVyc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdEtleUxpc3RlbmVycygpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBmbGFnIG9uIGtleXVwXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleXVwRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczYuX3VwZGF0ZUZsYWdGcm9tTnVtYmVyKF90aGlzNi50ZWxJbnB1dC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczYuX3RyaWdnZXJDb3VudHJ5Q2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2hhbmRsZUtleXVwRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZmxhZyBvbiBjdXQvcGFzdGUgZXZlbnRzIChub3cgc3VwcG9ydGVkIGluIGFsbCBtYWpvciBicm93c2VycylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2xpcGJvYXJkRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhY2sgYmVjYXVzZSBcInBhc3RlXCIgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGlucHV0IGlzIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoX3RoaXM2Ll9oYW5kbGVLZXl1cEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY3V0XCIsIHRoaXMuX2hhbmRsZUNsaXBib2FyZEV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgdGhpcy5faGFuZGxlQ2xpcGJvYXJkRXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2NhcFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FwKG51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4ID0gdGhpcy50ZWxJbnB1dC5nZXRBdHRyaWJ1dGUoXCJtYXhsZW5ndGhcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXggJiYgbnVtYmVyLmxlbmd0aCA+IG1heCA/IG51bWJlci5zdWJzdHIoMCwgbWF4KSA6IG51bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9pbml0Qmx1ckxpc3RlbmVyc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdEJsdXJMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAvLyBvbiBibHVyIG9yIGZvcm0gc3VibWl0OiBpZiBqdXN0IGEgZGlhbCBjb2RlIHRoZW4gcmVtb3ZlIGl0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdE9yQmx1ckV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczcuX3JlbW92ZUVtcHR5RGlhbENvZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGVsSW5wdXQuZm9ybSkgdGhpcy50ZWxJbnB1dC5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5faGFuZGxlU3VibWl0T3JCbHVyRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbElucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuX2hhbmRsZVN1Ym1pdE9yQmx1ckV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9yZW1vdmVFbXB0eURpYWxDb2RlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVFbXB0eURpYWxDb2RlKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZWxJbnB1dC52YWx1ZS5jaGFyQXQoMCkgPT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpYyA9IHRoaXMuX2dldE51bWVyaWModGhpcy50ZWxJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBqdXN0IGEgcGx1cywgb3IgaWYganVzdCBhIGRpYWwgY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFudW1lcmljIHx8IHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5kaWFsQ29kZSA9PT0gbnVtZXJpYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVsSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfZ2V0TnVtZXJpY1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TnVtZXJpYyhzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcRC9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl90cmlnZ2VyXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90cmlnZ2VyKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSB0byB1c2Ugb2xkIHNjaG9vbCBkb2N1bWVudC5jcmVhdGVFdmVudCBhcyBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBgbmV3IEV2ZW50KClgIHN5bnRheFxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGUuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gYnViYmxlLCBhbmQgaXMgY2FuY2VsbGFibGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5kaXNwYXRjaEV2ZW50KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3Nob3dEcm9wZG93blwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvd0Ryb3Bkb3duKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cnlMaXN0LmNsYXNzTGlzdC5yZW1vdmUoXCJpdGlfX2hpZGVcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGbGFnLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXREcm9wZG93blBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBoaWdobGlnaHRpbmcgYW5kIHNjcm9sbCB0byBhY3RpdmUgbGlzdCBpdGVtXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodExpc3RJdGVtKHRoaXMuYWN0aXZlSXRlbSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG8odGhpcy5hY3RpdmVJdGVtLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBiaW5kIGFsbCB0aGUgZHJvcGRvd24tcmVsYXRlZCBsaXN0ZW5lcnM6IG1vdXNlb3ZlciwgY2xpY2ssIGNsaWNrLW9mZiwga2V5ZG93blxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kRHJvcGRvd25MaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBhcnJvd1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duQXJyb3cuY2xhc3NMaXN0LmFkZChcIml0aV9fYXJyb3ctLXVwXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKFwib3Blbjpjb3VudHJ5ZHJvcGRvd25cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfdG9nZ2xlQ2xhc3NcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3RvZ2dsZUNsYXNzKGVsLCBjbGFzc05hbWUsIHNob3VsZEhhdmVDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkSGF2ZUNsYXNzICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyBlbHNlIGlmICghc2hvdWxkSGF2ZUNsYXNzICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfc2V0RHJvcGRvd25Qb3NpdGlvblwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0RHJvcGRvd25Qb3NpdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZHJvcGRvd25Db250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5kcm9wZG93bkNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmRyb3Bkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLnRlbElucHV0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93VG9wIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0Mzg0MDkxLzIxNzg2NlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd1RvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0VG9wID0gcG9zLnRvcCArIHdpbmRvd1RvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkcm9wZG93bkhlaWdodCA9IHRoaXMuY291bnRyeUxpc3Qub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvcGRvd25GaXRzQmVsb3cgPSAoZHJvcGRvd25Cb3R0b20gPCB3aW5kb3dCb3R0b20pXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd25GaXRzQmVsb3cgPSBpbnB1dFRvcCArIHRoaXMudGVsSW5wdXQub2Zmc2V0SGVpZ2h0ICsgZHJvcGRvd25IZWlnaHQgPCB3aW5kb3dUb3AgKyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd25GaXRzQWJvdmUgPSBpbnB1dFRvcCAtIGRyb3Bkb3duSGVpZ2h0ID4gd2luZG93VG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnkgZGVmYXVsdCwgdGhlIGRyb3Bkb3duIHdpbGwgYmUgYmVsb3cgdGhlIGlucHV0LiBJZiB3ZSB3YW50IHRvIHBvc2l0aW9uIGl0IGFib3ZlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5wdXQsIHdlIGFkZCB0aGUgZHJvcHVwIGNsYXNzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5jb3VudHJ5TGlzdCwgXCJpdGlfX2NvdW50cnktbGlzdC0tZHJvcHVwXCIsICFkcm9wZG93bkZpdHNCZWxvdyAmJiBkcm9wZG93bkZpdHNBYm92ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBkcm9wZG93bkNvbnRhaW5lciBpcyBlbmFibGVkLCBjYWxjdWxhdGUgcG9zdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcm9wZG93bkNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IGRlZmF1bHQgdGhlIGRyb3Bkb3duIHdpbGwgYmUgZGlyZWN0bHkgb3ZlciB0aGUgaW5wdXQgYmVjYXVzZSBpdCdzIG5vdCBpbiB0aGUgZmxvdy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSB3YW50IHRvIHBvc2l0aW9uIGl0IGJlbG93LCB3ZSBuZWVkIHRvIGFkZCBzb21lIGV4dHJhIHRvcCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0cmFUb3AgPSAhZHJvcGRvd25GaXRzQmVsb3cgJiYgZHJvcGRvd25GaXRzQWJvdmUgPyAwIDogdGhpcy50ZWxJbnB1dC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24uc3R5bGUudG9wID0gXCJcIi5jb25jYXQoaW5wdXRUb3AgKyBleHRyYVRvcCwgXCJweFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLnN0eWxlLmxlZnQgPSBcIlwiLmNvbmNhdChwb3MubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCwgXCJweFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSBtZW51IG9uIHdpbmRvdyBzY3JvbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3dTY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOC5fY2xvc2VEcm9wZG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5faGFuZGxlV2luZG93U2Nyb2xsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2dldENsb3Nlc3RMaXN0SXRlbVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q2xvc2VzdExpc3RJdGVtKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gdGhpcy5jb3VudHJ5TGlzdCAmJiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXRpX19jb3VudHJ5XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgcmVhY2hlZCB0aGUgY291bnRyeUxpc3QgZWxlbWVudCwgdGhlbiByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwgPT09IHRoaXMuY291bnRyeUxpc3QgPyBudWxsIDogZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfYmluZERyb3Bkb3duTGlzdGVuZXJzXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9iaW5kRHJvcGRvd25MaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIG1vdXNlIG92ZXIgYSBsaXN0IGl0ZW0sIGp1c3QgaGlnaGxpZ2h0IHRoYXQgb25lXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGFkZCB0aGUgY2xhc3MgXCJoaWdobGlnaHRcIiwgc28gaWYgdGhleSBoaXQgXCJlbnRlclwiIHdlIGtub3cgd2hpY2ggb25lIHRvIHNlbGVjdFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVNb3VzZW92ZXJDb3VudHJ5TGlzdCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBldmVudCBkZWxlZ2F0aW9uLCBhcyB3ZSdyZSBsaXN0ZW5pbmcgZm9yIHRoaXMgZXZlbnQgb24gdGhlIGNvdW50cnlMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdEl0ZW0gPSBfdGhpczkuX2dldENsb3Nlc3RMaXN0SXRlbShlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlzdEl0ZW0pIF90aGlzOS5faGlnaGxpZ2h0TGlzdEl0ZW0obGlzdEl0ZW0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJ5TGlzdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIHRoaXMuX2hhbmRsZU1vdXNlb3ZlckNvdW50cnlMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuIGZvciBjb3VudHJ5IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVDbGlja0NvdW50cnlMaXN0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gX3RoaXM5Ll9nZXRDbG9zZXN0TGlzdEl0ZW0oZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RJdGVtKSBfdGhpczkuX3NlbGVjdExpc3RJdGVtKGxpc3RJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudHJ5TGlzdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlQ2xpY2tDb3VudHJ5TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNsaWNrIG9mZiB0byBjbG9zZVxuICAgICAgICAgICAgICAgICAgICAvLyAoZXhjZXB0IHdoZW4gdGhpcyBpbml0aWFsIG9wZW5pbmcgY2xpY2sgaXMgYnViYmxpbmcgdXApXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGNhbm5vdCBqdXN0IHN0b3BQcm9wYWdhdGlvbiBhcyBpdCBtYXkgYmUgbmVlZGVkIHRvIGNsb3NlIGFub3RoZXIgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzT3BlbmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNsaWNrT2ZmVG9DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc09wZW5pbmcpIF90aGlzOS5fY2xvc2VEcm9wZG93bigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNPcGVuaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlQ2xpY2tPZmZUb0Nsb3NlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuIGZvciB1cC9kb3duIHNjcm9sbGluZywgZW50ZXIgdG8gc2VsZWN0LCBvciBsZXR0ZXJzIHRvIGp1bXAgdG8gY291bnRyeSBuYW1lLlxuICAgICAgICAgICAgICAgICAgICAvLyB1c2Uga2V5ZG93biBhcyBrZXlwcmVzcyBkb2Vzbid0IGZpcmUgZm9yIG5vbi1jaGFyIGtleXMgYW5kIHdlIHdhbnQgdG8gY2F0Y2ggaWYgdGhleVxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IGhpdCBkb3duIGFuZCBob2xkIGl0IHRvIHNjcm9sbCBkb3duIChubyBrZXl1cCBldmVudCkuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiB0aGUgZG9jdW1lbnQgYmVjYXVzZSB0aGF0J3Mgd2hlcmUga2V5IGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGlmIG5vIGlucHV0IGhhcyBmb2N1c1xuICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnlUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleWRvd25PbkRyb3Bkb3duID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCBkb3duIGtleSBmcm9tIHNjcm9sbGluZyB0aGUgd2hvbGUgcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBlbnRlciBrZXkgZnJvbSBzdWJtaXR0aW5nIGEgZm9ybSBldGNcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwIGFuZCBkb3duIHRvIG5hdmlnYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiQXJyb3dVcFwiIHx8IGUua2V5ID09PSBcIlVwXCIgfHwgZS5rZXkgPT09IFwiQXJyb3dEb3duXCIgfHwgZS5rZXkgPT09IFwiRG93blwiKSBfdGhpczkuX2hhbmRsZVVwRG93bktleShlLmtleSk7IGVsc2UgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIF90aGlzOS5faGFuZGxlRW50ZXJLZXkoKTsgZWxzZSBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIF90aGlzOS5fY2xvc2VEcm9wZG93bigpOyBlbHNlIGlmICgvXlthLXpBLVrDgC3Dv9CwLdGP0JAt0K8gXSQvLnRlc3QoZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVtcCB0byBjb3VudHJpZXMgdGhhdCBzdGFydCB3aXRoIHRoZSBxdWVyeSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlUaW1lcikgY2xlYXJUaW1lb3V0KHF1ZXJ5VGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ICs9IGUua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM5Ll9zZWFyY2hGb3JDb3VudHJ5KHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdGltZXIgaGl0cyAxIHNlY29uZCwgcmVzZXQgdGhlIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxZTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVLZXlkb3duT25Ecm9wZG93bik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfaGFuZGxlVXBEb3duS2V5XCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVVcERvd25LZXkoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0ga2V5ID09PSBcIkFycm93VXBcIiB8fCBrZXkgPT09IFwiVXBcIiA/IHRoaXMuaGlnaGxpZ2h0ZWRJdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgOiB0aGlzLmhpZ2hsaWdodGVkSXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBza2lwIHRoZSBkaXZpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5jbGFzc0xpc3QuY29udGFpbnMoXCJpdGlfX2RpdmlkZXJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0ga2V5ID09PSBcIkFycm93VXBcIiB8fCBrZXkgPT09IFwiVXBcIiA/IG5leHQucHJldmlvdXNFbGVtZW50U2libGluZyA6IG5leHQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0TGlzdEl0ZW0obmV4dCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9oYW5kbGVFbnRlcktleVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlRW50ZXJLZXkoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkSXRlbSkgdGhpcy5fc2VsZWN0TGlzdEl0ZW0odGhpcy5oaWdobGlnaHRlZEl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3NlYXJjaEZvckNvdW50cnlcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NlYXJjaEZvckNvdW50cnkocXVlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvdW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXJ0c1dpdGgodGhpcy5jb3VudHJpZXNbaV0ubmFtZSwgcXVlcnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gdGhpcy5jb3VudHJ5TGlzdC5xdWVyeVNlbGVjdG9yKFwiI2l0aS1cIi5jb25jYXQodGhpcy5pZCwgXCJfX2l0ZW0tXCIpLmNvbmNhdCh0aGlzLmNvdW50cmllc1tpXS5pc28yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGhpZ2hsaWdodGluZyBhbmQgc2Nyb2xsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0TGlzdEl0ZW0obGlzdEl0ZW0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUbyhsaXN0SXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9zdGFydHNXaXRoXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zdGFydHNXaXRoKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuc3Vic3RyKDAsIGIubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3VwZGF0ZVZhbEZyb21OdW1iZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVZhbEZyb21OdW1iZXIob3JpZ2luYWxOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlciA9IG9yaWdpbmFsTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZvcm1hdE9uRGlzcGxheSAmJiB3aW5kb3cuaW50bFRlbElucHV0VXRpbHMgJiYgdGhpcy5zZWxlY3RlZENvdW50cnlEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlTmF0aW9uYWwgPSAhdGhpcy5vcHRpb25zLnNlcGFyYXRlRGlhbENvZGUgJiYgKHRoaXMub3B0aW9ucy5uYXRpb25hbE1vZGUgfHwgbnVtYmVyLmNoYXJBdCgwKSAhPT0gXCIrXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pbnRsVGVsSW5wdXRVdGlscyRudSA9IGludGxUZWxJbnB1dFV0aWxzLm51bWJlckZvcm1hdCwgTkFUSU9OQUwgPSBfaW50bFRlbElucHV0VXRpbHMkbnUuTkFUSU9OQUwsIElOVEVSTkFUSU9OQUwgPSBfaW50bFRlbElucHV0VXRpbHMkbnUuSU5URVJOQVRJT05BTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXQgPSB1c2VOYXRpb25hbCA/IE5BVElPTkFMIDogSU5URVJOQVRJT05BTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciA9IGludGxUZWxJbnB1dFV0aWxzLmZvcm1hdE51bWJlcihudW1iZXIsIHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5pc28yLCBmb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG51bWJlciA9IHRoaXMuX2JlZm9yZVNldE51bWJlcihudW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbElucHV0LnZhbHVlID0gbnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3VwZGF0ZUZsYWdGcm9tTnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVGbGFnRnJvbU51bWJlcihvcmlnaW5hbE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSdyZSBpbiBuYXRpb25hbE1vZGUgYW5kIHdlIGFscmVhZHkgaGF2ZSBVUy9DYW5hZGEgc2VsZWN0ZWQsIG1ha2Ugc3VyZSB0aGUgbnVtYmVyIHN0YXJ0c1xuICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGEgKzEgc28gX2dldERpYWxDb2RlIHdpbGwgYmUgYWJsZSB0byBleHRyYWN0IHRoZSBhcmVhIGNvZGVcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlOiBpZiB3ZSBkb250IHlldCBoYXZlIHNlbGVjdGVkQ291bnRyeURhdGEsIGJ1dCB3ZSdyZSBoZXJlICh0cnlpbmcgdG8gdXBkYXRlIHRoZSBmbGFnXG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb20gdGhlIG51bWJlciksIHRoYXQgbWVhbnMgd2UncmUgaW5pdGlhbGlzaW5nIHRoZSBwbHVnaW4gd2l0aCBhIG51bWJlciB0aGF0IGFscmVhZHkgaGFzIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlhbCBjb2RlLCBzbyBmaW5lIHRvIGlnbm9yZSB0aGlzIGJpdFxuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gb3JpZ2luYWxOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZERpYWxDb2RlID0gdGhpcy5zZWxlY3RlZENvdW50cnlEYXRhLmRpYWxDb2RlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNOYW5wID0gc2VsZWN0ZWREaWFsQ29kZSA9PT0gXCIxXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgJiYgdGhpcy5vcHRpb25zLm5hdGlvbmFsTW9kZSAmJiBpc05hbnAgJiYgbnVtYmVyLmNoYXJBdCgwKSAhPT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIuY2hhckF0KDApICE9PSBcIjFcIikgbnVtYmVyID0gXCIxXCIuY29uY2F0KG51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgPSBcIitcIi5jb25jYXQobnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZmxhZyBpZiB1c2VyIHR5cGVzIGFyZWEgY29kZSBmb3IgYW5vdGhlciBjb3VudHJ5XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VwYXJhdGVEaWFsQ29kZSAmJiBzZWxlY3RlZERpYWxDb2RlICYmIG51bWJlci5jaGFyQXQoMCkgIT09IFwiK1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgPSBcIitcIi5jb25jYXQoc2VsZWN0ZWREaWFsQ29kZSkuY29uY2F0KG51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IGFuZCBleHRyYWN0IHZhbGlkIGRpYWwgY29kZSBmcm9tIGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaWFsQ29kZSA9IHRoaXMuX2dldERpYWxDb2RlKG51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1lcmljID0gdGhpcy5fZ2V0TnVtZXJpYyhudW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyeUNvZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlhbENvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5Q29kZXMgPSB0aGlzLmNvdW50cnlDb2Rlc1t0aGlzLl9nZXROdW1lcmljKGRpYWxDb2RlKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgcmlnaHQgY291bnRyeSBpcyBhbHJlYWR5IHNlbGVjdGVkLiB0aGlzIHNob3VsZCBiZSBmYWxzZSBpZiB0aGUgbnVtYmVyIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgbWF0Y2hlZCBkaWFsIGNvZGUgYmVjYXVzZSBpbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgYXJlIG11bHRpcGxlIGNvdW50cnkgbWF0Y2hlcywgdGhhdCB0aGUgZmlyc3Qgb25lIGlzIHNlbGVjdGVkIChub3RlOiB3ZSBjb3VsZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBjaGVjayB0aGF0IGhlcmUsIGJ1dCBpdCByZXF1aXJlcyB0aGUgc2FtZSBsb29wIHRoYXQgd2UgYWxyZWFkeSBoYXZlIGxhdGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFscmVhZHlTZWxlY3RlZCA9IGNvdW50cnlDb2Rlcy5pbmRleE9mKHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5pc28yKSAhPT0gLTEgJiYgbnVtZXJpYy5sZW5ndGggPD0gZGlhbENvZGUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1JlZ2lvbmxlc3NOYW5wTnVtYmVyID0gc2VsZWN0ZWREaWFsQ29kZSA9PT0gXCIxXCIgJiYgdGhpcy5faXNSZWdpb25sZXNzTmFucChudW1lcmljKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgdXBkYXRlIHRoZSBmbGFnIGlmOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSkgTk9UICh3ZSBjdXJyZW50bHkgaGF2ZSBhIE5BTlAgZmxhZyBzZWxlY3RlZCwgYW5kIHRoZSBudW1iZXIgaXMgYSByZWdpb25sZXNzTmFucClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFORFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQikgdGhlIHJpZ2h0IGNvdW50cnkgaXMgbm90IGFscmVhZHkgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZWdpb25sZXNzTmFucE51bWJlciAmJiAhYWxyZWFkeVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdXNpbmcgb25seUNvdW50cmllcyBvcHRpb24sIGNvdW50cnlDb2Rlc1swXSBtYXkgYmUgZW1wdHksIHNvIHdlIG11c3QgZmluZCB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub24tZW1wdHkgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvdW50cnlDb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRyeUNvZGVzW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZSA9IGNvdW50cnlDb2Rlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlci5jaGFyQXQoMCkgPT09IFwiK1wiICYmIG51bWVyaWMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZhbGlkIGRpYWwgY29kZSwgc28gZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IHVzZSBnZXROdW1lcmljIGhlcmUgYmVjYXVzZSB0aGUgbnVtYmVyIGhhcyBub3QgYmVlbiBmb3JtYXR0ZWQgeWV0LCBzbyBjb3VsZCBjb250YWluXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiYWQgY2hhcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbnVtYmVyIHx8IG51bWJlciA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVtcHR5LCBvciBqdXN0IGEgcGx1cywgc28gZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeUNvZGUgPSB0aGlzLmRlZmF1bHRDb3VudHJ5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudHJ5Q29kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NldEZsYWcoY291bnRyeUNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9pc1JlZ2lvbmxlc3NOYW5wXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1JlZ2lvbmxlc3NOYW5wKG51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtZXJpYyA9IHRoaXMuX2dldE51bWVyaWMobnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWVyaWMuY2hhckF0KDApID09PSBcIjFcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWFDb2RlID0gbnVtZXJpYy5zdWJzdHIoMSwgMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnaW9ubGVzc05hbnBOdW1iZXJzLmluZGV4T2YoYXJlYUNvZGUpICE9PSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfaGlnaGxpZ2h0TGlzdEl0ZW1cIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hpZ2hsaWdodExpc3RJdGVtKGxpc3RJdGVtLCBzaG91bGRGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkl0ZW0gPSB0aGlzLmhpZ2hsaWdodGVkSXRlbTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZJdGVtKSBwcmV2SXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiaXRpX19oaWdobGlnaHRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRJdGVtID0gbGlzdEl0ZW07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRJdGVtLmNsYXNzTGlzdC5hZGQoXCJpdGlfX2hpZ2hsaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZEZvY3VzKSB0aGlzLmhpZ2hsaWdodGVkSXRlbS5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2dldENvdW50cnlEYXRhXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDb3VudHJ5RGF0YShjb3VudHJ5Q29kZSwgaWdub3JlT25seUNvdW50cmllc09wdGlvbiwgYWxsb3dGYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5TGlzdCA9IGlnbm9yZU9ubHlDb3VudHJpZXNPcHRpb24gPyBhbGxDb3VudHJpZXMgOiB0aGlzLmNvdW50cmllcztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudHJ5TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50cnlMaXN0W2ldLmlzbzIgPT09IGNvdW50cnlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50cnlMaXN0W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGxvd0ZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNvdW50cnkgZGF0YSBmb3IgJ1wiLmNvbmNhdChjb3VudHJ5Q29kZSwgXCInXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9zZXRGbGFnXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRGbGFnKGNvdW50cnlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2Q291bnRyeSA9IHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5pc28yID8gdGhpcy5zZWxlY3RlZENvdW50cnlEYXRhIDoge307XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvIHRoaXMgZmlyc3QgYXMgaXQgd2lsbCB0aHJvdyBhbiBlcnJvciBhbmQgc3RvcCBpZiBjb3VudHJ5Q29kZSBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YSA9IGNvdW50cnlDb2RlID8gdGhpcy5fZ2V0Q291bnRyeURhdGEoY291bnRyeUNvZGUsIGZhbHNlLCBmYWxzZSkgOiB7fTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBkZWZhdWx0Q291bnRyeSAtIHdlIG9ubHkgbmVlZCB0aGUgaXNvMiBmcm9tIG5vdyBvbiwgc28ganVzdCBzdG9yZSB0aGF0XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuaXNvMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0Q291bnRyeSA9IHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5pc28yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGbGFnSW5uZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJpdGlfX2ZsYWcgaXRpX19cIi5jb25jYXQoY291bnRyeUNvZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzZWxlY3RlZCBjb3VudHJ5J3MgdGl0bGUgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IGNvdW50cnlDb2RlID8gXCJcIi5jb25jYXQodGhpcy5zZWxlY3RlZENvdW50cnlEYXRhLm5hbWUsIFwiOiArXCIpLmNvbmNhdCh0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuZGlhbENvZGUpIDogXCJVbmtub3duXCI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGbGFnLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zZXBhcmF0ZURpYWxDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlhbENvZGUgPSB0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuZGlhbENvZGUgPyBcIitcIi5jb25jYXQodGhpcy5zZWxlY3RlZENvdW50cnlEYXRhLmRpYWxDb2RlKSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGlhbENvZGUuaW5uZXJIVE1MID0gZGlhbENvZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvZmZzZXRXaWR0aCBpcyB6ZXJvIGlmIGlucHV0IGlzIGluIGEgaGlkZGVuIGNvbnRhaW5lciBkdXJpbmcgaW5pdGlhbGlzYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZEZsYWdXaWR0aCA9IHRoaXMuc2VsZWN0ZWRGbGFnLm9mZnNldFdpZHRoIHx8IHRoaXMuX2dldEhpZGRlblNlbGVjdGVkRmxhZ1dpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgNnB4IG9mIHBhZGRpbmcgYWZ0ZXIgdGhlIGdyZXkgc2VsZWN0ZWQtZGlhbC1jb2RlIGJveCwgYXMgdGhpcyBpcyB3aGF0IHdlIHVzZSBpbiB0aGUgY3NzXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbElucHV0LnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCJcIi5jb25jYXQoc2VsZWN0ZWRGbGFnV2lkdGggKyA2LCBcInB4XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgaW5wdXQncyBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVQbGFjZWhvbGRlcigpO1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGFjdGl2ZSBsaXN0IGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd0Ryb3Bkb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkl0ZW0gPSB0aGlzLmFjdGl2ZUl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2SXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiaXRpX19hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldkl0ZW0uc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50cnlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBwcmVmZXJyZWQgaXRlbSBmaXJzdCwgZWxzZSBmYWxsIGJhY2sgdG8gc3RhbmRhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSB0aGlzLmNvdW50cnlMaXN0LnF1ZXJ5U2VsZWN0b3IoXCIjaXRpLVwiLmNvbmNhdCh0aGlzLmlkLCBcIl9faXRlbS1cIikuY29uY2F0KGNvdW50cnlDb2RlLCBcIi1wcmVmZXJyZWRcIikpIHx8IHRoaXMuY291bnRyeUxpc3QucXVlcnlTZWxlY3RvcihcIiNpdGktXCIuY29uY2F0KHRoaXMuaWQsIFwiX19pdGVtLVwiKS5jb25jYXQoY291bnRyeUNvZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5jbGFzc0xpc3QuYWRkKFwiaXRpX19hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVJdGVtID0gbmV4dEl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZsYWcuc2V0QXR0cmlidXRlKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsIG5leHRJdGVtLmdldEF0dHJpYnV0ZShcImlkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaWYgdGhlIGZsYWcgaGFzIGNoYW5nZWQgb3Igbm90XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2Q291bnRyeS5pc28yICE9PSBjb3VudHJ5Q29kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9nZXRIaWRkZW5TZWxlY3RlZEZsYWdXaWR0aFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0SGlkZGVuU2VsZWN0ZWRGbGFnV2lkdGgoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGdldCB0aGUgcmlnaHQgc3R5bGluZyB0byBhcHBseSwgYWxsIHdlIG5lZWQgaXMgYSBzaGFsbG93IGNsb25lIG9mIHRoZSBjb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGVuIHRvIGluamVjdCBhIGRlZXAgY2xvbmUgb2YgdGhlIHNlbGVjdGVkRmxhZyBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJDbG9uZSA9IHRoaXMudGVsSW5wdXQucGFyZW50Tm9kZS5jbG9uZU5vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyQ2xvbmUuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3NDb250YWluZXJDbG9uZSA9IHRoaXMuZmxhZ3NDb250YWluZXIuY2xvbmVOb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckNsb25lLmFwcGVuZENoaWxkKGZsYWdzQ29udGFpbmVyQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRGbGFnQ2xvbmUgPSB0aGlzLnNlbGVjdGVkRmxhZy5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzQ29udGFpbmVyQ2xvbmUuYXBwZW5kQ2hpbGQoc2VsZWN0ZWRGbGFnQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBzZWxlY3RlZEZsYWdDbG9uZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyQ2xvbmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb250YWluZXJDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl91cGRhdGVQbGFjZWhvbGRlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUGxhY2Vob2xkZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaG91bGRTZXRQbGFjZWhvbGRlciA9IHRoaXMub3B0aW9ucy5hdXRvUGxhY2Vob2xkZXIgPT09IFwiYWdncmVzc2l2ZVwiIHx8ICF0aGlzLmhhZEluaXRpYWxQbGFjZWhvbGRlciAmJiB0aGlzLm9wdGlvbnMuYXV0b1BsYWNlaG9sZGVyID09PSBcInBvbGl0ZVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmludGxUZWxJbnB1dFV0aWxzICYmIHNob3VsZFNldFBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyVHlwZSA9IGludGxUZWxJbnB1dFV0aWxzLm51bWJlclR5cGVbdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyTnVtYmVyVHlwZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuaXNvMiA/IGludGxUZWxJbnB1dFV0aWxzLmdldEV4YW1wbGVOdW1iZXIodGhpcy5zZWxlY3RlZENvdW50cnlEYXRhLmlzbzIsIHRoaXMub3B0aW9ucy5uYXRpb25hbE1vZGUsIG51bWJlclR5cGUpIDogXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gdGhpcy5fYmVmb3JlU2V0TnVtYmVyKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmN1c3RvbVBsYWNlaG9sZGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHRoaXMub3B0aW9ucy5jdXN0b21QbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgdGhpcy5zZWxlY3RlZENvdW50cnlEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVsSW5wdXQuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfc2VsZWN0TGlzdEl0ZW1cIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbGVjdExpc3RJdGVtKGxpc3RJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBzZWxlY3RlZCBmbGFnIGFuZCBhY3RpdmUgbGlzdCBpdGVtXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFnQ2hhbmdlZCA9IHRoaXMuX3NldEZsYWcobGlzdEl0ZW0uZ2V0QXR0cmlidXRlKFwiZGF0YS1jb3VudHJ5LWNvZGVcIikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZURyb3Bkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURpYWxDb2RlKGxpc3RJdGVtLmdldEF0dHJpYnV0ZShcImRhdGEtZGlhbC1jb2RlXCIpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9jdXMgdGhlIGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVsSW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHV0IGN1cnNvciBhdCBlbmQgLSB0aGlzIGZpeCBpcyByZXF1aXJlZCBmb3IgRkYgYW5kIElFMTEgKHdpdGggbmF0aW9uYWxNb2RlPWZhbHNlIGkuZS4gYXV0b1xuICAgICAgICAgICAgICAgICAgICAvLyBpbnNlcnRpbmcgZGlhbCBjb2RlKSwgd2hvIHRyeSB0byBwdXQgdGhlIGN1cnNvciBhdCB0aGUgYmVnaW5uaW5nIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLnRlbElucHV0LnZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShsZW4sIGxlbik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFnQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckNvdW50cnlDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2Nsb3NlRHJvcGRvd25cIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Nsb3NlRHJvcGRvd24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRyeUxpc3QuY2xhc3NMaXN0LmFkZChcIml0aV9faGlkZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZsYWcuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGFycm93XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcGRvd25BcnJvdy5jbGFzc0xpc3QucmVtb3ZlKFwiaXRpX19hcnJvdy0tdXBcIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVuYmluZCBrZXkgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUtleWRvd25PbkRyb3Bkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVDbGlja09mZlRvQ2xvc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cnlMaXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5faGFuZGxlTW91c2VvdmVyQ291bnRyeUxpc3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdW50cnlMaXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVDbGlja0NvdW50cnlMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG1lbnUgZnJvbSBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcm9wZG93bkNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTW9iaWxlKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLl9oYW5kbGVXaW5kb3dTY3JvbGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24ucGFyZW50Tm9kZSkgdGhpcy5kcm9wZG93bi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZHJvcGRvd24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoXCJjbG9zZTpjb3VudHJ5ZHJvcGRvd25cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfc2Nyb2xsVG9cIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Njcm9sbFRvKGVsZW1lbnQsIG1pZGRsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb3VudHJ5TGlzdDtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93VG9wIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0Mzg0MDkxLzIxNzg2NlxuICAgICAgICAgICAgICAgICAgICB2YXIgd2luZG93VG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJIZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyVG9wID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvd1RvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckJvdHRvbSA9IGNvbnRhaW5lclRvcCArIGNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRIZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRUb3AgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvd1RvcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRCb3R0b20gPSBlbGVtZW50VG9wICsgZWxlbWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1Njcm9sbFRvcCA9IGVsZW1lbnRUb3AgLSBjb250YWluZXJUb3AgKyBjb250YWluZXIuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWlkZGxlT2Zmc2V0ID0gY29udGFpbmVySGVpZ2h0IC8gMiAtIGVsZW1lbnRIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFRvcCA8IGNvbnRhaW5lclRvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2Nyb2xsIHVwXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWlkZGxlKSBuZXdTY3JvbGxUb3AgLT0gbWlkZGxlT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnNjcm9sbFRvcCA9IG5ld1Njcm9sbFRvcDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50Qm90dG9tID4gY29udGFpbmVyQm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGwgZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pZGRsZSkgbmV3U2Nyb2xsVG9wICs9IG1pZGRsZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHREaWZmZXJlbmNlID0gY29udGFpbmVySGVpZ2h0IC0gZWxlbWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgPSBuZXdTY3JvbGxUb3AgLSBoZWlnaHREaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlRGlhbENvZGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZURpYWxDb2RlKG5ld0RpYWxDb2RlQmFyZSwgaGFzU2VsZWN0ZWRMaXN0SXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRWYWwgPSB0aGlzLnRlbElucHV0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIGhhdmluZyB0byBwYXNzIHRoaXMgZXZlcnkgdGltZVxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGlhbENvZGUgPSBcIitcIi5jb25jYXQobmV3RGlhbENvZGVCYXJlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0VmFsLmNoYXJBdCgwKSA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlJ3MgYSBwbHVzIHNvIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIHJlcGxhY2VtZW50IChkb2Vzbid0IG1hdHRlciBpZiBuYXRpb25hbE1vZGUgb3Igbm90KVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZEaWFsQ29kZSA9IHRoaXMuX2dldERpYWxDb2RlKGlucHV0VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2RGlhbENvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IG51bWJlciBjb250YWlucyBhIHZhbGlkIGRpYWwgY29kZSwgc28gcmVwbGFjZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld051bWJlciA9IGlucHV0VmFsLnJlcGxhY2UocHJldkRpYWxDb2RlLCBuZXdEaWFsQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgbnVtYmVyIGNvbnRhaW5zIGFuIGludmFsaWQgZGlhbCBjb2RlLCBzbyBkaXRjaCBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChubyB3YXkgdG8gZGV0ZXJtaW5lIHdoZXJlIHRoZSBpbnZhbGlkIGRpYWwgY29kZSBlbmRzIGFuZCB0aGUgcmVzdCBvZiB0aGUgbnVtYmVyIGJlZ2lucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdOdW1iZXIgPSBuZXdEaWFsQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMubmF0aW9uYWxNb2RlIHx8IHRoaXMub3B0aW9ucy5zZXBhcmF0ZURpYWxDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBkbyBhbnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmF0aW9uYWxNb2RlIGlzIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBhbiBleGlzdGluZyB2YWx1ZSB3aXRoIG5vIGRpYWwgY29kZTogcHJlZml4IHRoZSBuZXcgZGlhbCBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TnVtYmVyID0gbmV3RGlhbENvZGUgKyBpbnB1dFZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzU2VsZWN0ZWRMaXN0SXRlbSB8fCAhdGhpcy5vcHRpb25zLmF1dG9IaWRlRGlhbENvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBleGlzdGluZyB2YWx1ZSBhbmQgZWl0aGVyIHRoZXkndmUganVzdCBzZWxlY3RlZCBhIGxpc3QgaXRlbSwgb3IgYXV0b0hpZGVEaWFsQ29kZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGVkOiBpbnNlcnQgbmV3IGRpYWwgY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld051bWJlciA9IG5ld0RpYWxDb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC52YWx1ZSA9IG5ld051bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9nZXREaWFsQ29kZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGlhbENvZGUobnVtYmVyLCBpbmNsdWRlQXJlYUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpYWxDb2RlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBpbnRlcmVzdGVkIGluIGludGVybmF0aW9uYWwgbnVtYmVycyAoc3RhcnRpbmcgd2l0aCBhIHBsdXMpXG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIuY2hhckF0KDApID09PSBcIitcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bWVyaWNDaGFycyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgY2hhcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBudW1iZXIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGNoYXIgaXMgbnVtYmVyIChodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODkzNTY0OS8yMTc4NjYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChjLCAxMCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyaWNDaGFycyArPSBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjdXJyZW50IG51bWVyaWNDaGFycyBtYWtlIGEgdmFsaWQgZGlhbCBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlQXJlYUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvdW50cnlDb2Rlc1tudW1lcmljQ2hhcnNdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgdGhlIGFjdHVhbCByYXcgc3RyaW5nICh1c2VmdWwgZm9yIG1hdGNoaW5nIGxhdGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxDb2RlID0gbnVtYmVyLnN1YnN0cigwLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaWFsQ29kZXNbbnVtZXJpY0NoYXJzXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxDb2RlID0gbnVtYmVyLnN1YnN0cigwLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UncmUganVzdCBsb29raW5nIGZvciBhIGRpYWwgY29kZSwgd2UgY2FuIGJyZWFrIGFzIHNvb24gYXMgd2UgZmluZCBvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdG9wIHNlYXJjaGluZyBhcyBzb29uIGFzIHdlIGNhbiAtIGluIHRoaXMgY2FzZSB3aGVuIHdlIGhpdCBtYXggbGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1lcmljQ2hhcnMubGVuZ3RoID09PSB0aGlzLmNvdW50cnlDb2RlTWF4TGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlhbENvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJfZ2V0RnVsbE51bWJlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RnVsbE51bWJlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMudGVsSW5wdXQudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlhbENvZGUgPSB0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuZGlhbENvZGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmVmaXg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1lcmljVmFsID0gdGhpcy5fZ2V0TnVtZXJpYyh2YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlcGFyYXRlRGlhbENvZGUgJiYgdmFsLmNoYXJBdCgwKSAhPT0gXCIrXCIgJiYgZGlhbENvZGUgJiYgbnVtZXJpY1ZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB1c2luZyBzZXBhcmF0ZURpYWxDb2RlLCBpdCBpcyB2aXNpYmxlIHNvIGlzIGVmZmVjdGl2ZWx5IHBhcnQgb2YgdGhlIHR5cGVkIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gXCIrXCIuY29uY2F0KGRpYWxDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcIl9iZWZvcmVTZXROdW1iZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2JlZm9yZVNldE51bWJlcihvcmlnaW5hbE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gb3JpZ2luYWxOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2VwYXJhdGVEaWFsQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpYWxDb2RlID0gdGhpcy5fZ2V0RGlhbENvZGUobnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgdmFsaWQgZGlhbCBjb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlhbENvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIF9nZXREaWFsQ29kZSByZXR1cm5lZCBhbiBhcmVhIGNvZGUgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxDb2RlID0gXCIrXCIuY29uY2F0KHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5kaWFsQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBsb3Qgb2YgbnVtYmVycyB3aWxsIGhhdmUgYSBzcGFjZSBzZXBhcmF0aW5nIHRoZSBkaWFsIGNvZGUgYW5kIHRoZSBtYWluIG51bWJlciwgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29tZSBOQU5QIG51bWJlcnMgd2lsbCBoYXZlIGEgaHlwaGVuIGUuZy4gKzEgNjg0LTczMy0xMjM0IC0gaW4gYm90aCBjYXNlcyB3ZSB3YW50IHRvIGdldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJpZCBvZiBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IGRvbid0IGp1c3QgdHJpbSBhbGwgbm9uLW51bWVyaWNzIGFzIG1heSB3YW50IHRvIHByZXNlcnZlIGFuIG9wZW4gcGFyZW50aGVzaXMgZXRjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbnVtYmVyW2RpYWxDb2RlLmxlbmd0aF0gPT09IFwiIFwiIHx8IG51bWJlcltkaWFsQ29kZS5sZW5ndGhdID09PSBcIi1cIiA/IGRpYWxDb2RlLmxlbmd0aCArIDEgOiBkaWFsQ29kZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyLnN1YnN0cihzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhcChudW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3RyaWdnZXJDb3VudHJ5Q2hhbmdlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90cmlnZ2VyQ291bnRyeUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcihcImNvdW50cnljaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJoYW5kbGVBdXRvQ291bnRyeVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVBdXRvQ291bnRyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbml0aWFsQ291bnRyeSA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG11c3Qgc2V0IHRoaXMgZXZlbiBpZiB0aGVyZSBpcyBhbiBpbml0aWFsIHZhbCBpbiB0aGUgaW5wdXQ6IGluIGNhc2UgdGhlIGluaXRpYWwgdmFsIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnZhbGlkIGFuZCB0aGV5IGRlbGV0ZSBpdCAtIHRoZXkgc2hvdWxkIHNlZSB0aGVpciBhdXRvIGNvdW50cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdENvdW50cnkgPSB3aW5kb3cuaW50bFRlbElucHV0R2xvYmFscy5hdXRvQ291bnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3Mgbm8gaW5pdGlhbCB2YWx1ZSBpbiB0aGUgaW5wdXQsIHRoZW4gdXBkYXRlIHRoZSBmbGFnXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGVsSW5wdXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvdW50cnkodGhpcy5kZWZhdWx0Q291bnRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVBdXRvQ291bnRyeVByb21pc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiaGFuZGxlVXRpbHNcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVXRpbHMoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSByZXF1ZXN0IHdhcyBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW50bFRlbElucHV0VXRpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYW4gaW5pdGlhbCB2YWx1ZSBpbiB0aGUgaW5wdXQsIHRoZW4gZm9ybWF0IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50ZWxJbnB1dC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZhbEZyb21OdW1iZXIodGhpcy50ZWxJbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVQbGFjZWhvbGRlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVV0aWxzU2NyaXB0UHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZGVzdHJveVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybSA9IHRoaXMudGVsSW5wdXQuZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGxvd0Ryb3Bkb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCAoYW5kIHVuYmluZCBsaXN0ZW5lcnMpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZURyb3Bkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmxhZy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlQ2xpY2tTZWxlY3RlZEZsYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGFnc0NvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVGbGFnc0NvbnRhaW5lcktleWRvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGFiZWwgY2xpY2sgaGFja1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gdGhpcy5fZ2V0Q2xvc2VzdExhYmVsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFiZWwpIGxhYmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVMYWJlbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB1bmJpbmQgaGlkZGVuSW5wdXQgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbklucHV0ICYmIGZvcm0pIGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLl9oYW5kbGVIaWRkZW5JbnB1dFN1Ym1pdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVuYmluZCBhdXRvSGlkZURpYWxDb2RlIGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9IaWRlRGlhbENvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtKSBmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5faGFuZGxlU3VibWl0T3JCbHVyRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLl9oYW5kbGVTdWJtaXRPckJsdXJFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gdW5iaW5kIGtleSBldmVudHMsIGFuZCBjdXQvcGFzdGUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVsSW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2hhbmRsZUtleXVwRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjdXRcIiwgdGhpcy5faGFuZGxlQ2xpcGJvYXJkRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYXN0ZVwiLCB0aGlzLl9oYW5kbGVDbGlwYm9hcmRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhdHRyaWJ1dGUgb2YgaWQgaW5zdGFuY2U6IGRhdGEtaW50bC10ZWwtaW5wdXQtaWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZWxJbnB1dC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWludGwtdGVsLWlucHV0LWlkXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgbWFya3VwIChidXQgbGVhdmUgdGhlIG9yaWdpbmFsIGlucHV0KVxuICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IHRoaXMudGVsSW5wdXQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnRlbElucHV0LCB3cmFwcGVyKTtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHdyYXBwZXIpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMuaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IFwiZ2V0RXh0ZW5zaW9uXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEV4dGVuc2lvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbnRsVGVsSW5wdXRVdGlscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGxUZWxJbnB1dFV0aWxzLmdldEV4dGVuc2lvbih0aGlzLl9nZXRGdWxsTnVtYmVyKCksIHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YS5pc28yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImdldE51bWJlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROdW1iZXIoZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW50bFRlbElucHV0VXRpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc28yID0gdGhpcy5zZWxlY3RlZENvdW50cnlEYXRhLmlzbzI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50bFRlbElucHV0VXRpbHMuZm9ybWF0TnVtYmVyKHRoaXMuX2dldEZ1bGxOdW1iZXIoKSwgaXNvMiwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImdldE51bWJlclR5cGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TnVtYmVyVHlwZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pbnRsVGVsSW5wdXRVdGlscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGxUZWxJbnB1dFV0aWxzLmdldE51bWJlclR5cGUodGhpcy5fZ2V0RnVsbE51bWJlcigpLCB0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuaXNvMik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC05OTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImdldFNlbGVjdGVkQ291bnRyeURhdGFcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0ZWRDb3VudHJ5RGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImdldFZhbGlkYXRpb25FcnJvclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWxpZGF0aW9uRXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuaW50bFRlbElucHV0VXRpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc28yID0gdGhpcy5zZWxlY3RlZENvdW50cnlEYXRhLmlzbzI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50bFRlbElucHV0VXRpbHMuZ2V0VmFsaWRhdGlvbkVycm9yKHRoaXMuX2dldEZ1bGxOdW1iZXIoKSwgaXNvMik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC05OTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcImlzVmFsaWROdW1iZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNWYWxpZE51bWJlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMuX2dldEZ1bGxOdW1iZXIoKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5Q29kZSA9IHRoaXMub3B0aW9ucy5uYXRpb25hbE1vZGUgPyB0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuaXNvMiA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW50bFRlbElucHV0VXRpbHMgPyBpbnRsVGVsSW5wdXRVdGlscy5pc1ZhbGlkTnVtYmVyKHZhbCwgY291bnRyeUNvZGUpIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInNldENvdW50cnlcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q291bnRyeShvcmlnaW5hbENvdW50cnlDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHJ5Q29kZSA9IG9yaWdpbmFsQ291bnRyeUNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYWxyZWFkeSBzZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWRGbGFnSW5uZXIuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaXRpX19cIi5jb25jYXQoY291bnRyeUNvZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RmxhZyhjb3VudHJ5Q29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEaWFsQ29kZSh0aGlzLnNlbGVjdGVkQ291bnRyeURhdGEuZGlhbENvZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJDb3VudHJ5Q2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiBcInNldE51bWJlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXROdW1iZXIobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIG11c3QgdXBkYXRlIHRoZSBmbGFnIGZpcnN0LCB3aGljaCB1cGRhdGVzIHRoaXMuc2VsZWN0ZWRDb3VudHJ5RGF0YSwgd2hpY2ggaXMgdXNlZCBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9ybWF0dGluZyB0aGUgbnVtYmVyIGJlZm9yZSBkaXNwbGF5aW5nIGl0XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFnQ2hhbmdlZCA9IHRoaXMuX3VwZGF0ZUZsYWdGcm9tTnVtYmVyKG51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZhbEZyb21OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyQ291bnRyeUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogXCJzZXRQbGFjZWhvbGRlck51bWJlclR5cGVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxhY2Vob2xkZXJOdW1iZXJUeXBlKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyTnVtYmVyVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVBsYWNlaG9sZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBdKTtcbiAgICAgICAgICAgIHJldHVybiBJdGk7XG4gICAgICAgIH0oKTtcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqXG4gKiAgU1RBVElDIE1FVEhPRFNcbiAqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgICAgLy8gZ2V0IHRoZSBjb3VudHJ5IGRhdGEgb2JqZWN0XG4gICAgICAgIGludGxUZWxJbnB1dEdsb2JhbHMuZ2V0Q291bnRyeURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBhbGxDb3VudHJpZXM7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGluamVjdCBhIDxzY3JpcHQ+IGVsZW1lbnQgdG8gbG9hZCB1dGlscy5qc1xuICAgICAgICB2YXIgaW5qZWN0U2NyaXB0ID0gZnVuY3Rpb24gaW5qZWN0U2NyaXB0KHBhdGgsIGhhbmRsZVN1Y2Nlc3MsIGhhbmRsZUZhaWx1cmUpIHtcbiAgICAgICAgICAgIC8vIGluamVjdCBhIG5ldyBzY3JpcHQgZWxlbWVudCBpbnRvIHRoZSBwYWdlXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3JFYWNoSW5zdGFuY2UoXCJoYW5kbGVVdGlsc1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlU3VjY2VzcykgaGFuZGxlU3VjY2VzcygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm9yRWFjaEluc3RhbmNlKFwicmVqZWN0VXRpbHNTY3JpcHRQcm9taXNlXCIpO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVGYWlsdXJlKSBoYW5kbGVGYWlsdXJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2NyaXB0LmNsYXNzTmFtZSA9IFwiaXRpLWxvYWQtdXRpbHNcIjtcbiAgICAgICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gcGF0aDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gbG9hZCB0aGUgdXRpbHMgc2NyaXB0XG4gICAgICAgIGludGxUZWxJbnB1dEdsb2JhbHMubG9hZFV0aWxzID0gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICAgICAgLy8gMiBvcHRpb25zOlxuICAgICAgICAgICAgLy8gMSkgbm90IGFscmVhZHkgc3RhcnRlZCBsb2FkaW5nIChzdGFydClcbiAgICAgICAgICAgIC8vIDIpIGFscmVhZHkgc3RhcnRlZCBsb2FkaW5nIChkbyBub3RoaW5nIC0ganVzdCB3YWl0IGZvciB0aGUgb25sb2FkIGNhbGxiYWNrIHRvIGZpcmUsIHdoaWNoIHdpbGxcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgaGFuZGxlVXRpbHMgb24gYWxsIGluc3RhbmNlcywgaW52b2tpbmcgdGhlaXIgcmVzb2x2ZVV0aWxzU2NyaXB0UHJvbWlzZSBmdW5jdGlvbnMpXG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5pbnRsVGVsSW5wdXRVdGlscyAmJiAhd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMuc3RhcnRlZExvYWRpbmdVdGlsc1NjcmlwdCkge1xuICAgICAgICAgICAgICAgIC8vIG9ubHkgZG8gdGhpcyBvbmNlXG4gICAgICAgICAgICAgICAgd2luZG93LmludGxUZWxJbnB1dEdsb2JhbHMuc3RhcnRlZExvYWRpbmdVdGlsc1NjcmlwdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBwcm9taXNlcywgdGhlbiByZXR1cm4gYSBwcm9taXNlXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmplY3RTY3JpcHQocGF0aCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluamVjdFNjcmlwdChwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAgaW50bFRlbElucHV0R2xvYmFscy5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgICAgICAvLyB2ZXJzaW9uXG4gICAgICAgIGludGxUZWxJbnB1dEdsb2JhbHMudmVyc2lvbiA9IFwiMTcuMC4zXCI7XG4gICAgICAgIC8vIGNvbnZlbmllbmNlIHdyYXBwZXJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgaXRpID0gbmV3IEl0aShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpdGkuX2luaXQoKTtcbiAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcImRhdGEtaW50bC10ZWwtaW5wdXQtaWRcIiwgaXRpLmlkKTtcbiAgICAgICAgICAgIHdpbmRvdy5pbnRsVGVsSW5wdXRHbG9iYWxzLmluc3RhbmNlc1tpdGkuaWRdID0gaXRpO1xuICAgICAgICAgICAgcmV0dXJuIGl0aTtcbiAgICAgICAgfTtcbiAgICB9KCk7XG59KTsiXX0=
